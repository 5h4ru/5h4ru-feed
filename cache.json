{
  "sources": [
    {
      "title": "名有りさんの日記",
      "feedUrl": "https://naari.hatenablog.com/rss",
      "siteUrl": "https://naari.hatenablog.com/",
      "articles": [
        {
          "id": "hatenablog://entry/13574176438062947102",
          "author": null,
          "description": "さっきこんな記事を書いた→ osmosfeedを使って自分のためのアンテナ(RSSリーダー)を作成する - 名有りさんの日記\n技術的な、難しいことはさておき、ようはブログのアンテナを作成することができた、というもの。これの音MAD界隈版作ろうとしている。恐らく自分が観測できている範囲の音MAD作者のブログはほとんど集めきっていてるはずで、これを実際に運用し始めている。\nこの収集方法は @otomad_blomaga というTwitterアカウントのように選りすぐられたものではなく、機械的に動かしている。なので例外的に音MADについて触れたような記事を取り上げられないが、でもある程度の網羅性は担保できていると思う。\notomad-feed\n現在のリストは以下の通りで、既に更新されていないものも含めて161件ものブログが開設されている。そのうちの116件は note.com のアカウントで、昨今のトレンドを感じられる。次点ははてなブログで、40件ほど。\nhttps://github.com/naari3/otomad-feed/blob/main/osmosfeed.yaml\nこれらのリストから1時間に1回ほどデータを収集するようになっていて、新しい記事があればおそらく新着記事に追加される。うまく動いていないようだったらぜひとも教えてください。\nまた、このリストから漏れてしまったブログについても随時募集中で、僕に直接伝えるか、GitHubに知見があるのであればリポジトリにPRを投げてもらうか、このフォームからリクエストを投げることができる。ぜひとも協力していただきたいです。逆にリストから削除してほしい時は、それもまた僕に直接伝えてください。もうしわけない。\n既にRSSリーダーを利用している方については、上に張ったリストを追加してもらうか、このアンテナ自体がRSSのフィードを提供しているので、それを読み込んでもらうと良いと思う。ただちょっと巨大かも。僕は↓このフィードを使った運用をしていないので、もし巨大すぎて不都合があるようだったらそれについて教えてほしいかも。\nhttps://naari3.github.io/otomad-feed/feed.atom\nなぜこれを作るのか\n一番大きな理由は自分がよく見ているコンテンツを作っている人がどんな文章を書いているのか？というのを探るためだけど、もうちょっと書いてみる。\nまず音MAD作者の方々が書くブログは面白い。恐らく音MADの制作の過程で生まれた所感の方向性*1とブログみたいなものとの相性が良いという事もあるだろうが、別に音MADに関連したものではなくとも面白く、そのセンスはさすが創作に根を詰めているだけあるなと思ったりもする。これを逃さず閲覧できるアンテナを作成したかった。\nまた、これは集合知としても役立つ気がしている。これは「音MADに関する技術的な記事を逃さないようになる」というだけではなく、ただ普通に関係のないことについて書かれた文章についても同じように捉えられると思っている。ブログは後世に伝える手段としてはかなり優れているように思う。現に数年前に更新したっきりでそれ以来全く更新のない音MAD系のブログも存在しており、ただその記事は今でも問題なく閲覧できたりする。日記ってすごいかもしれん - 名有りさんの日記の下の方に書いたことと似たような気持ちだが、みんなが文章を書き続けるとそれが界隈自体のアーカイブとして機能し始めると思う。そのための、草の根としてのアンテナでもありたい。\nよろしくお願いします → otomad-feed\n*1:ネタ/技術/思考",
          "link": "https://naari.hatenablog.com/entry/2022/02/13/143118",
          "publishedOn": "2022-02-13T05:31:18.000Z",
          "wordCount": 122,
          "title": "音MAD作者のブログを集めたアンテナを作成している",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438062919224",
          "author": null,
          "description": "github.com\nyamlファイルにRSSフィードを書き溜めておく\n新着記事一覧のhtmlを静的ファイルとして作成する\nGitHub Pages配下に設置する\nこれを定期的に動くGitHub Actions上で実行する\nそうすることでRSSフィードのためのアンテナを用意することができるようになる。というのがosmosfeedの特徴。上述した環境をかんたんに用意するためのテンプレートも存在しており、テンプレートを使用したリポジトリを作成した後、yamlを埋めるだけでosmosfeedを使えるようになる。既存のRSS追うやつと違って、これはGitHub上にyamlで管理するだけなので大変にお手軽で、移植性もかなり高い。なにより、GitHub Actionsと連携するのがとても賢いなと思い、自分もこれに従ってみることにした。\nhttps://naari3.github.io/naari3-feed/\nhttps://github.com/naari3/naari3-feed/\nこれまでははてなブログの購読リストのみを使用していたが、性質上はてなブログしか集めることができないために他種の媒体を追うのが困難になっていた。今回によってRSSフィードを配信している媒体であればなんでも追えるようになったのだと思う。\n運用してすぐに「更新日時をかなり未来に置いておくことで、特定の記事を記事順の先頭に置くハック」の存在を思い出す。アンテナの先頭もそういった記事で埋まってしまう。これらの記事は意味合い的には新着記事ではなく、アンテナ運用の上ではただ邪魔なだけなので、「未来の記事はアンテナに含めない」のような対応が必要になった*1。ので、PRを投げた。投げてから反映されるまでの間は自分のネームスペース上にosmosfeedをpublishし、それを利用するように変更していた。昨日くらいにマージ、最新版がpublishされたようなのでそちらを利用するように変更した。\nまた、osmosfeedが吐き出すhtmlは事前に用意されたテンプレートを使用しているのだが、これを自分で用意することも可能。今回、記事のサムネイルを記事一覧右側に設置したかったので、そのように対応した。ただ、サムネを取得する方法があまり良いとは言えない方法だった*2ので、どうするのが妥当か？を聞いてみたところ (osmoscraft/osmosfeed discussion#75) 、現在取り組まれているv2にサムネイル取得のためのコードが存在し(または用意中で)、これをバックポートすることで対応できるのではないか？という話を頂いた。今後に期待すると良さそう。\nここで書いたそれぞれの対応は、osmosfeedの性質によって実現できる対応だと思った。体験がかなり良い。\nもしこれを見ているあなたも試したくなったのであれば、以下のページを参考にするか、手っ取り早くは先程挙げたテンプレートからリポジトリを作成すればよい。\npaiza.hatenablog.com\nGitHub Pagesは性質上パブリックなものなので、生成結果のアンテナもパブリックなものとして公開される。これを利用することで、「特定の界隈をまとめたアンテナをその界隈に対して共有することもできる」と考えた。これは共有知としてかなり有用なのではないか。GitHubで管理されている性質上、誰でもフォークでき、もし追加すべきブログがあるのであればそれを対象に加えることもできるだろう*3。そういった記事をこれから別記事として書く。\n*1:もうすこし賢い対応方法はあるだろうが、この対応で自分の要望は解決されるので問題なし\n*2:そもそもRSSフィードとしてサムネを用意する方法がめちゃくちゃたくさんあって簡単に対応できない\n*3:しかしこれはgitに対する知見が前提になってしまう",
          "link": "https://naari.hatenablog.com/entry/2022/02/13/131522",
          "publishedOn": "2022-02-13T04:15:22.000Z",
          "wordCount": 138,
          "title": "osmosfeedを使って自分のためのアンテナ(RSSリーダー)を作成する",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438059035553",
          "author": null,
          "description": "最近はアニメを「音MADの聖地巡礼」という気持ちで見ている。あ！ここ見たことある！！超音MADだ！！！がかなり多くて本当に楽しい。その流れでゆゆ式を見たが、とても面白かった。\n\nゆゆ式を見た　本当に面白かった\n— なあり (@_naari_) 2022年1月26日\n  \n人間関係の捉え方がかなり良かった\n\n\n3人が残りの2人に対してどう捉えているか？とか\n特に幼馴染2人に対するゆずこの捉え方とか\n\n\n随所に見られる疎外感の演出を入れてくれて本当にありがとう\n3人の中の他の関係についても同じようなものがある\n相川さん側の3人組からの距離感の詰め方(赦し方？？)とか\nというか普通にこの3人のこの高校生としての雰囲気はかなり良かった\n多分この人たちは相当賢い\n\n\n連想や反応の仕方が良い\n毒が良い\nギャグセンスがかなりすき\nお互いがお互いを女性として良い、と捉えてる感じも良い\n\n\nたいへんえっちだと思った\nかなり面白かった。いいアニメ。\nその一方で、このアニメはもはや古いらしい。「お前は本当に出遅れているな」と言われた。\n\n「ゆゆ式めっちゃ刺さった」という話をDiscordのサーバーで広げたら通話相手が誰もゆゆ式の内容を覚えていなかったのでたいへん悲しい\n— なあり (@_naari_) 2022年1月26日\n  \nそんな中で「にゃにゃ式」を見ろという声があった。「にゃにゃ式」はBDあたりの特典でしか見ることができない。ので、もうほとんど衝動でBOXを買ってしまった。9年ほど前のアニメであるにも関わらず、去年の3月に廉価版のBD BOXが発売されていたのでそれを買った。僕は出遅れていたのに、本当にありがたいことのように思う。\nhttps://www.amazon.co.jp/dp/B08QDLP9DK\n\npic.twitter.com/uOhQGch4Wo\n— なあり (@_naari_) 2022年2月9日\n  \nアニメでBDを買うのはまちカドまぞくに次いで2つ目だった。まちカドまぞくも「ウオーめっちゃきれいになるなー」とか思っていたが、ゆゆ式は直前に(アニメの画質が悪めであることでも有名らしき)アマプラビデオで見ていたのもあってかなり綺麗に思えた。\nちなみに「にゃにゃ式」は本編と違う趣があり、また良かった。攻めと受けがはっきりしてましたね。たぶんアマプラでは見れないっぽいのでぜひともBD BOXを買ってみてください。\n蛇足 Blu-ray Discってどうやって再生するのが普通なんだ？？\nPCでBlu-ray Discってどうやって再生するんですか？？\n今回はVLCでどうにかして*1*2*3再生したんだけれど、本来は何のソフトを使うのが普通なんだ？？またはPCからは再生しないほうが良い？？？\n*1:頑張って\n*2:なんとかして\n*3:多分良くない方法で",
          "link": "https://naari.hatenablog.com/entry/2022/02/12/073653",
          "publishedOn": "2022-02-11T22:36:53.000Z",
          "wordCount": 141,
          "title": "ゆゆ式Blu-ray BOX(スペシャルプライス版)を買った",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438060827028",
          "author": null,
          "description": "金曜日にふーふーさんと通話しながら酒を飲んだら睡眠と起床が終了した。土曜日 04:00 ～ 17:00 、日曜日 16:30 ～ 23:00 みたいな睡眠をして、今起きて月曜日に備えている。折角の休日が…という気持ちにならなくもないけど、まあ色々やったしよく寝たしなんやかんや充実していた。月曜日もなんとかなるだろう。\n最近太鼓の達人のPC版が発売された。思い出のゲームでもあり、かつ最近はゲーム欲が盛んなので、僕はこの波に乗じている。XBoxパスというサブスク(1000円/月くらい)に加入していると無料でプレイできるらしいが、一括購入(6000円くらい)もできたのでそちらで購入した。後で知ったんだけど、Discord Nitroの会員に配られるギフトとしてこのパスの2ヶ月間無料コードが届いていたらしい。結構もったいないことをした気がする。\n年ぶりの太鼓ともあって結構苦戦している。地力はもちろん低下し、かつ全体の難易度はもちろん上昇しているため、☆9であっても初見だとノルマ落ちしかねない状況だった。ただ、地力を持ち直しつつあり、昔好きだったDoom Noizをはじめとした☆10クリア難易度下位くらいの譜面はなんとかクリアできるようになってきた。今の上位勢は普通に全良するらしい。もっとうまくなりたい。\nゲーム自体は正直安く作られている気がしている。初期の譜面数や全解禁後の譜面数が他と比べて少なく*1、PC版特有の機能もないのでは？と思う。ただ収録曲はかなり良い線を踏んでいる。既存の資産をうまく組み合わせたプロダクトのように見えた。今はDLCの登場を待ち望んでいるところ。\n最近音MAD作者の書いているブログを集めている。別記事にするつもりなのであまり詳しく書かないが、自動更新され続けるアンテナを作成するつもり。リストはこちらで一元管理しているので、もし過不足あったらおしえてください。\n*1:具体的には10くらい",
          "link": "https://naari.hatenablog.com/entry/2022/02/07/023048",
          "publishedOn": "2022-02-06T17:30:48.000Z",
          "wordCount": 129,
          "title": "日記",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438058982089",
          "author": null,
          "description": "Getting Over Itの字幕をすべて(全言語、全場面のものを)記載したサイトを作った。完全にネタバレありなので、未クリアの人は踏まないほうが良い。\nGetting Over It Subtitles\n↑これ。\n機能として、各Termを言語別で表示/非表示を切り替えられる。また、Termに対して雑なジャンル分けしたので表示するものを絞ることができる。\n動機としては3種類あって、以下のような感じ。\n日本語の字幕と英語で言っていることがズレているように感じることがあり、でも聞き取れるわけもないから文字起こしを頂いた上で意訳が適切なのかどうかを確かめたい\n考察のための足掛かりにしたい\nこれらの文言をいつでも引用することができる状態にしたい\n日本語と英語のズレについては、おそらくプレイしたことのある人で、かつ字幕を見たことがある人なら少し感じるところがあると思う。そもそも日本語としての完成度もちょっと低いし、気になる部分は多かった。例えば、\nMaybe this is what this digital culture is.\nA monstrous mountain of trash,\nthe ash-heap of creativity's fountain.\nA landfill with everything we ever thought of in it\nGrand, infinite, and unsorted.\n\n\nが\n多分これは、このデジタル文化があるものです。\nゴミの巨大な山、\n創造性の噴水の灰ヒープ。\n私たちが今までそれで考えるすべてのものとの埋立\nグランド無限、およびソートされていません。\n\n\nになるのは、なんというかもうちょっとうまい選択肢はあったんじゃないかと思う。みたいな、そういうもの。揚げ足取り。\n考察については単純で、ただただ列挙されているた…",
          "link": "https://naari.hatenablog.com/entry/2022/02/01/184330",
          "publishedOn": "2022-02-01T09:43:30.000Z",
          "wordCount": 201,
          "title": "Getting Over It with Bennett Foddyの字幕をすべて記載したサイトを作った",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438057887116",
          "author": null,
          "description": "1ヶ月くらい前からWindowsの調子が悪くなっていた。再起動をする度、ドットでできたサークルが永遠にループする減少に見舞われるタイプのやつ。事象的にはカーネル起動に失敗している、と見受けられるが、詳細はなにもわからん。Windowsは難しいので。自分はパソコンは基本立ち上げっぱなしの状態で過ごしているので、たまにあるWindows Updateの度に困っている、というくらいで放置し続けていた。今回、RTX 3060tiが届いたわけだけれど、こんな状態でパーツを取り替えたら何かがあった時に問題の切り分けが難しくなるだろうと思い、今日は今回その解決を試みていた。身内のSlackで修正の様子を実況していて、こんな感じだった。\n事象共有\nこれに対し、@zzufが以下のように言い出した。\nエスパー\nエスパー2\nこれが実際当たっていた。RTX 3060tiに置換したらふつうに再起動できるようになった。\nやったか！？\n一件が落着する様子\n心当たりはある。昨日までは750tiを使っていたのだけれど、急にディスプレイが真っ暗になる、画面がリフレッシュされなくなる、みたいな事象に何度か見舞われることがあったり、他にもグラボからカリカリと音が聞こえてきたり、主にハード面で結構な心配事があった。だけど、まさかドライバがエラーを吐いてカーネルが巻き添えを食らっていたなんて…LinuxディストロのOSを運用している人からよく聞くような挙動に見えたのでちょっとびっくりした。まあ実際にハードが悪かったのか、それともドライバを作ってる人たちがなにかをサボったのかは分からないのですが。\nただ、最初の事象報告で挙げていたUSBあたりの問題はまだ治っていない。再起動したら毎回キーボードを抜き差ししているし、Bluetoothのマウスも4,5分待たないと使えるようにならないまま。これに関してはWindowsのイベントビューアーを確認することで具体的な原因を掴むことができるんじゃないか？ということを教えてもらった。実際にそちらを確認すると、様々なエラーが吐かれ続けていて、うわぁという気持ち。こんな感じでたくさん出ていた。\n\nまあでも新しいグラボを付けてちゃんと起動できたし、対処法になりうる何かも受け取れたし、これは一旦後回しでもいいかなあ。めでたしめでたし。",
          "link": "https://naari.hatenablog.com/entry/2022/01/29/184115",
          "publishedOn": "2022-01-29T09:41:15.000Z",
          "wordCount": 124,
          "title": "RTX 3060tiを装備したらWindowsの起動の具合が悪くなる事象が治った",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20220129/20220129175357.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20220129/20220129175357.png"
        },
        {
          "id": "hatenablog://entry/13574176438057673630",
          "author": null,
          "description": "前回AIFについて記事を書いた時はFocusrite Scarlett 2i2 3rd genを使っていたが、これはルーティングの機能を持っていないため、友人に売り払った。今はそのひとつ上のグレードであり、ルーティングの機能も備えているFocusrite Scarlett 4i4 3rd genを使っている。ただ、これがちょっと曲者っぽくて、様々な問題に当たっている。\n1つ目の事象は、入力から0dbを超えた音を入れた際、AIFに再起動が走るというもの。Discordのサーバーでゲームをやっている時、リアクションで大きな声を出す場合があるが、その際によくこれに当たってしまう。事象としてはデバイスの再接続みたいになって、各所出力先を再設定する手間が増える。さらに、極稀にAIFが入出力を全く受け付けなくなることがあって、その場合はサービスマネージャーから Windows Audio Endpoint Builder を再起動してからマシン自体も再起動しなければならない。以下が検索して見つかるredditのpostだが、特に解決には至っていない様子。\nhttps://www.reddit.com/r/Focusrite/comments/ftj60r/4i4_gen_3_crashesrestarts_on_high_input_volume/\nhttps://www.reddit.com/r/Focusrite/comments/ir8wo6/scarlett_4i4_gen_3_crashes_upon_loud_volume/\n2つ目の事象は、問題の切り分けが済んでいないのだけれど、Discordで他人の画面共有を閲覧中にのみ自分の音声がクライアントに掴まれなくなるというもの。どうやらエコー除去的な挙動が間に挟まっている？らしく、redditなどでは「エコー除去をオフにしたら喋れるようになった」「ノイズ抑制(Krisp)をオンにしたら喋れるようになった」など、色々な言説がある。自分の場合は後者でどうにか喋れるようになったが、Krispがオンの状態だと笑い声が掻き消されてコミュニケーションが難しくなってしまう。USBマイクの時はこの事象にあたらなかったので、恐らくこのAIFが悪いのだろう。\nので、買い換える必要があるのだが、これもグラボ同様あまり気にしたことのないデバイスなので乗り換え先が見つからない。DTMをやっている関係上、入出力がそれぞれ4以上あり、デバイス内でループバックの機能を持っており、そのルーティングはソフトからできればそれで充分なのだが、その上でかなりの数があるのでどれを選べばよいのかわからない。某定番機材を検討していたが、知り合いが「DirectXがデバイスを掴んでいる時でないとマイクの入力が受け付けられなくなった」と言っており、悩んでしまっている。もしかしたらAIFのドライバを書くのって難しい？おすすめがあったらおしえてください。",
          "link": "https://naari.hatenablog.com/entry/2022/01/29/035044",
          "publishedOn": "2022-01-28T18:50:44.000Z",
          "wordCount": 98,
          "title": "オーディオインターフェースの調子が悪い",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438057125848",
          "author": null,
          "description": "周りで Getting Over It with Bennett Foddy をプレイする人が出てきたので久しぶりに自分もやった。が、マウスの不調と思わしき挙動にぶち当たってしまい、良いタイムを出すことができなかった。このマウスの不調をどうにかするべきだ、と試行錯誤していたら、マウスパッドがクソほど汚くなっているせいでうまく動かなくなっていたことが判明。マウスのセンサー部分がちょうど汚れにさしかかるとカーソルの動きがガクガクになる。さっき洗濯機につっこんだので、これでうまくいけばきっと解決できる。\nGetting Over Itは製作者であるBennett Foddy自らがナレーターを勤め、プレイヤーと対話する形式のゲームなんだけど、身の回りには割とこのナレーターを切ってしまう人が多く居るらしい。僕はこれは本当に本当にもったいないことだと思っている。\n現在においてインターネット上のコンテンツはとてつもない数になっている。製作者は熾烈な競争を勝ち抜くために、既に咀嚼済みかのようなやわらかいコンテンツを生産するようになる。これにより、我々は雛鳥のように口を上に向けているだけでコンテンツの大量消費ができるようになった。どんなコンテンツも一瞬でポイできるようになってしまった。このゲームは、どうやらこのようにして産まれた弱々しいプレイヤーこと我々を苦しめるために作られたものらしい。このゲームは他のゲームとは違い、ただただ苦しく、かなり険しい。それでも挑戦するプレイヤーは存在する。有象無象のアセット群が雑に積み重なったようなステージだが、プレイヤーは挑戦していくにつれてそれに意味を付け出し、ついには険しさの伴う本物の山だと錯覚し、何度も下落しながらも、登頂のために挑戦し続ける。最後に登頂した時、それは本当に素晴らしい体験だったと錯覚するほどに。\nというようなことを、ナレーターが教えてくれる。珍しくも、自身についての解釈を自ら伝えてくれる。このゲームに対する反骨精神だけを装備してこの山を登りきるのは恐らく更なる苦痛を伴うだけだ。\n自分はこのナレーターこそがこのゲームの趣旨を決定した最も重要な要素だと思っている。単なるクソゲー/苦痛ゲーとは違うと思わせてくれたのはかなり大きい。恐らくなんだけれど、一時期この傾向のゲームが増えたのも上述したBennett Foddyに対する敬意なんじゃないかと思う。良い循環っぽい。\nというわけで、ナレーターと共に登らない選択をたいへんにもったいなく思うのだけれど、これを強要するのもなんかアレだしなぁ〜〜むずかしい。作品を押し付けたらよくないし。むずかしい。",
          "link": "https://naari.hatenablog.com/entry/2022/01/27/134226",
          "publishedOn": "2022-01-27T04:42:26.000Z",
          "wordCount": 121,
          "title": "久々に壺をやった/ナレーターについて",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438056435614",
          "author": null,
          "description": "<追記>\n購入した\nnaari.hatenablog.com\n</追記>\n2016年頃に知り合いから3000円で譲ってもらった中古のGTX 750tiをずっと使い続けていたけど、最近それが限界に近いっぽい。最近の自分は750tiでは割にあわない計算資源の使い方をしているっぽい。かっこつけずに言うと、ゲームができない、配信もできない。\n自分はあまり3Dのアクションゲームへのプレイングスキルが高くなく、選り好みをして2Dのゲームばかりしてしまう。ゲームの性質上、2Dゲームは3Dゲームよりもグラ要求が低いことが多く、よってGTX 750tiでも充分であることが多かった。が、最近はそうもいかなくなってきており、例えば「Getting Over It」は画質「素晴らしい」だと動作が不安になってくるし、「スーパーボンバーマンRオンライン」はキャラセレ*1を筆頭にゲーム中もかなりリソースを食べる。これらのゲームをやりながらOBSで配信をするのはもはや不可能。2Dゲームもリッチに3Dモデルを動かしたりしているのでとても大変。\nこのあたりの要求が常々上がっていくのはとても仕方のないことだと思っている。自分はその立場に立ったことがないので妄想の域を脱出しないけど→各プロジェクトの要求としては少しでも多くの人に遊んでもらうために、そのプロジェクトが使っても良いリソース量の上限は厳しく管理されている。常にリソースを節約することを考えながら設計/実装しているため、「本来やりたかったこと」を存分に実装することができない。コード的にも厳しいことになっていく。「日を追うごとに世間の持つリソースも少しずつ強くなっているだろう」と仮定し、年々少しずつ要求スペックも少しずつ上げることで、開発側ができることも広がっていく。←恐らくこんな感じだと思う。\nそういった現実と照らし合わせると、GTX 750tiはもう限界だと思う。新しいグラボ購入を検討する必要がある。ただ、あまりにも古いグラボから新しいグラボに乗り換える必要があるため、感覚としてどのくらいのレベルのものが必要なのかが分からない。CPUやメモリは様子を常に見ている*2ので、今後を見据えてこのくらいのものを買っとくかな〜という勘が働く。グラボについては本当にサボりすぎた。\n他にもNVENCやCUDAあたりの概念との互換性を気にしないといけなかったり、NVIDIAのグラボのみに向けられたソフトの存在だったり、気にかけなければならない部分も多い。実はかなり大変なパーツであることがよく分かる。\nまあでも結局は予算と照らし合わせるのが妥当かな、という気持ちのもと、雑にRTX 3060tiに決定しようとしている。「今後一生上がり続けるのではないか」みたいな話を聞いた後にこんな情報↓も見たし、近日購入予定。\ngigazine.net\nいろいろ書いたけど、最近はふつうに新しめの3Dのゲームもやりたい。モンハンとかいろいろ。配信もしたい。\nこれ買ったらあと何年使い続けるんだろう。多分だけど買い替えはしないだろうから骨の髄までの勢いで行きたい。\n*1:おそらくキャラの切り替えをスムーズに行うために全キャラのモデルを読み込んでいるのではないかと思う　どうにかしてくれ\n*2:prometheusとgrafanaでちゃんとメトリクスを見れる状態にある",
          "link": "https://naari.hatenablog.com/entry/2022/01/25/145640",
          "publishedOn": "2022-01-25T05:56:40.000Z",
          "wordCount": 128,
          "title": "グラボを買いたい(未遂)",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438055885420",
          "author": null,
          "description": "最近はとある人のとあるブログの記事をずっと読んでいる。記事数がかなり膨大で、11年くらい前からずっと定期的な投稿が出来ているように見える。意識的なアウトプットというやつなのかな？その人はWeb系のエンジニアで、所属を意識できるような記事がたくさんあった。へー、ここにインターンに行ってる人なのか、とか、ここで働いてたんだ、とか。その所属での出来事も書いてくれていて、社員との交流だったり、登壇のことだったり、その支援だったり。今はフリーランスになって、週休3日?4日?でゆっくり暮らしているらしい。バリバリな技術記事と共に存在する個人的な記事たちをざっと追うだけでその人の10年間を追体験しているような気持ちになった。\n最近自分がブログに熱を入れているのはこの間記事にしたような言語化についての練習が主だけど、側面としては上に書いた人たちへの憧れみたいなところもあったりする*1。僕もアウトプットの方法としてのブログを大事にしていきたい。今はとても楽しいというだけで記事を書いている、もしこれが上手いこと積もっていくのなら、そのうち大きな証跡みたいになるのだろうか。そうなるといいですね。\n上に挙げた人のブログとか、そうでなくとも今からは離れた時代に書かれたような文章をインターネット上で見つけるとかなり嬉しくなるよね。その記事が残っていたというアーカイブ的な素晴らしさ、アップデートが不要なプリミティブな考え方、など。小さな身内での事件を記してくれた記事とかは傍から見る分には純粋な読み物として面白く、かつ学びがあることも多い。また、そういう人が未だに文章を書き続けているとなおさら嬉しくなる。「古から今までインターネットのおもしろを支えていたのはこの人だ」みたいな。生き証人みたいでかっこいい。もちろん「自分が深くに潜って文章を発掘したのだ！見つけた！」というdig的な気持ちもあるけど、まぁどうであれ、文章などのコンテンツは基本残ってくれているだけでとても嬉しい気がする。\n界隈の人間がなにか行動をした際に「またそういうことをしているのか、一体何度同じ問題を繰り返すのか」と後ろ指を指されている場面を見たのだけれど、そういうのって過去起きた事象を記して後世に伝えなかったその界隈にも多少の問題があるのではないかと思っている*2。そういった当事者意識を持ちたいよね～、という大きな話ではないが、記事を書くことによる副次的な部分としての、もしかしたら何かの肥やしになるのではないか？という小さな意義をほんのちょっとでも良いから感じていきたい。\n*1:さらに別の側面として、僕はみんなの文章が読みたくて、であれば表立ってまず自分が文章を書いていったほうが良いよね、という気持ちでやっている。僕よりも文章を書いている友人と話していた時にそういう感じになった。もしみんなが文章をたくさん書くようになったら嬉しいな～\n*2:もちろんこの問題は難しい前提で、そういう面もあるよね～くらいで捉えてほしいです",
          "link": "https://naari.hatenablog.com/entry/2022/01/23/232457",
          "publishedOn": "2022-01-23T14:24:57.000Z",
          "wordCount": 107,
          "title": "日記ってすごいかもしれん",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438055818847",
          "author": null,
          "description": "1回目\n友人の家でレヴュースタァライトの映画を見させていただいたあと、いろいろあってCart Racerをやることになった。僕は代わりにGetting Over Itを勧めた。\n\nあああああああ pic.twitter.com/vyedJjwuvx\n— なあり (@_naari_) 2022年1月8日\n  \nおじさんを操作して買い物の時に使うようなカートに乗り込み、設定されているゴールに向かう、というゲーム。1ステージに3つゴールが指定されていて、4ステージあった。\nこの操作感がかなり独特でやばかった。だからこそのB級ゲーム*1なのだとは思うが、あまりにも大変だった。\n先程書いた「カートに乗る」がまず大変で、WASDとジャンプボタンを駆使してかごを乗っける部分にがんばって乗らないといけない。「乗る」という操作があるわけではなく、「結果として乗ってしまった」というのが正しそう。\n基本カートは坂の上に設置されており、おじさんが乗ると同時にストッパーが外れて進み始める。カートが進んでいる間はAとDで左右のハンドリングを効かせられる。が、これもまた難しく、左右にハンドルを切る度にカート自体も左右に揺れ、軸がブレる。これによってカートの滑り具合が増してしまい、とても曲がりづらくなる。さらに大きくブレると普通に横転する。\nそんな状況の中、床に設置された矢印(踏むと加速する)を経由してジャンプ台を踏み、空を飛んでゴールに到達しなければならない。勿論空中での操作は効かないので、ジャンプ台に入るまでの行動調整でこれを達成する必要がある。本当に大変だった。\n最後のステージの最後のゴールが最も大変だった。そのゴールに挑戦するまでのattempt数より、最後のゴールに費やしたattempt数の方が多かった。このステージは実際に難しいらしく、Cart Racerに慣れたプレイヤー達も声を揃えて「ここ…",
          "link": "https://naari.hatenablog.com/entry/2022/01/23/204039",
          "publishedOn": "2022-01-23T11:40:39.000Z",
          "wordCount": 143,
          "title": "Cart Racerを2回クリアした",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438055159229",
          "author": null,
          "description": "一人暮らしをしてからずっとマクドナルドにお世話になっていて、公式Twitterをよく見ている。これ故、新しいメニューとかは結構すぐ気になってしまって優先的に買ったりしている。\n最近ゴディバとのコラボメニューとして、期間限定でホットチョコレートが登場した。\nwww.mcdonalds.co.jp\nくっそうまそ～～～～のみて～～～～～～～～～～～～　甘い系のコラボメニューでマックカフェ専用でないもの久々に見たな、こんなのは頼むしかない、、、\n自分はフルリモートで働いているので、外に出たくないという気持ちが加速してUberEatsで頼むようにしている。が、なんとこのメニューはUberEatsでは頼むことができなかった。マックデリバリーのアプリでも注文することができなかった。どちらも、そもそもメニューの一覧に存在しない。\n\nマックのチョコのヤツまだウーバーイーツやっとらんのだが\n— なあり (@_naari_) 2022年1月19日\n  \n\n【衝撃】チョコのやつウバイツやらんらしい\n— なあり (@_naari_) 2022年1月19日\n  \n↑これはTLで聞きかじった情報\n\nなんでうーばーいーつではホットチョコやらないの\n— なあり (@_naari_) 2022年1月20日\n  \n↑悲しんでいる…\n\nマクドナルドに怒ってこようかな！\n— なあり (@_naari_) 2022年1月20日\n  \nなぜこのメニューはデリバリーの対象にならないんだ……期間限定のバーガーとかナゲット、デザートは普通に一覧に載るし、運びにくさという点を考えてもホットコーヒーが注文できる時点で問題から外しても良さそうだよな……\nそしたら商売的な方法なのだろうか、店舗に出向くしかないのか、ぐぬぬ悔しい……\nというわけで1/20の夜にマクドナルドの実店舗に向かった。しかし\n\nせっかく外に出たのに最寄りのマックきたらホットチョコ売り切れだった！！！！！！！！\n— なあり (@_naari_) 2022年1月20日\n  \nなかった…メニューには「ご好評につき終了しました」って書いてある…\nこれ、そもそもお店で取り扱われていない可能性があるな、だからUberEatsでも一覧になかったのだろうか？とか思っていたけど、翌日の昼になって直接電話をしたら全くそんなことはなかった。おやつ時くらいに遅めの昼飯としてマックに向かった。\n\nうおおおおおおおおおおおおお pic.twitter.com/cDgpiV8k09\n— なあり (@_naari_) 2022年1月21日\n  \nこうして無事飲むことができました。おめでとう、よかったね\n評価\nこれ、まあおいしいけど、ちょっと高くない？Sで300円、Mで400円はちょっと…\n追記\n昼に電話をするのは本当に良くないらしいです。ツイッターで怒られた。申し訳ない。",
          "link": "https://naari.hatenablog.com/entry/2022/01/22/000258",
          "publishedOn": "2022-01-21T15:02:58.000Z",
          "wordCount": 124,
          "title": "マクドナルドのホットチョコレートを飲んだ",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438051593131",
          "author": null,
          "description": "AGDQ2022を見た。\nAGDQ2022についてのかるーい説明をする→　海外で毎年初めに行われているゲームのRTA系イベントで、1/10～1/16のあいだ、ほぼノンストップでゲームのRTAが繰り広げられる。このあいだ書いたRiJの元ネタとなったイベント。\nJapanese Restreamという公式ミラーが存在し、こちらでは日本語で解説を行ってくれる。ただ、元配信に音声を乗っける都合上、元配信側の音声はとても小さくなる。コンプレッサーの外部ソースとして日本語の音声が入っている感じ。\n解説終わり、ここからは感想\n三連休はやることがあって見れなかった。ほとんど1/11から見始めた。\nJapanese Restreamで見たり、そうでなかったりの五分五分だった。さっき書いたとおり、元ストリームのほうが音がよく聞こえるため。\nアーカイブはYouTubeチャンネルにある。日本語解説のアーカイブはこちらから\n見たかったけど見逃したやつ\nDKC2\nMegaman 2\nkirby 3\nsupermonkeyball\nCrash Team Racing\nパズルボブル4\n実家にこのシリーズのゲームが複数本存在するので見てみるか～程度の気持ちで見た\nうますぎワロタ\n\n\nこのゲームは壊れがなく、純粋にうまさを見ることが出来た\n\n\nこのゲームは本当に難しい\n僕は難しすぎるステージについては自滅して点線のガイドを得ていたが、このレベルだと既に心眼で見えているらしくて点線があってもなくてもあまり関係ないらしい\nマップ理解やルート構築の点のうまさももちろんあるが、それよりも純粋なパズルボブルのうまさが光っていた\nWRおめでとうございます\nお誕生日もおめでとうございます\nwww.youtube.com\nhttps://www.twitch.tv/videos/1260950431?collection=k…",
          "link": "https://naari.hatenablog.com/entry/2022/01/21/225357",
          "publishedOn": "2022-01-21T13:53:57.000Z",
          "wordCount": 306,
          "title": "AGDQ2022を見た",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438054613284",
          "author": null,
          "description": "おもしろい",
          "link": "https://naari.hatenablog.com/entry/2022/01/20/111807",
          "publishedOn": "2022-01-20T02:18:07.000Z",
          "wordCount": 80,
          "title": "「コーヒー」を打ち間違えて「コーホー」になった",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438054542380",
          "author": null,
          "description": "ラバーダッグ・デバッグやテディーベア・デバッグと名付けられているコードのデバッグの手法がある。\nja.wikipedia.org\nプログラマーがラバー・ダック（アヒルちゃん）を持ち歩きアヒルちゃんに向かってコードを1行ずつ説明することによりデバッグを行うという話が由来である。\n\n\n一見精神的にヤバいやつのように見られるが、Wikipediaには続けてこう書いてある。\nプログラマーの多くは誰かに問題を説明した経験があり、その相手はプログラミングの知識が全くないこともあり得るが、問題を説明している過程で解決策を思いつくことがある。\n目的とするコードと、実際のコードの挙動を観察して、説明することにより、その違いが明白になるのだ。\n\n\nプログラミングの未経験者に対してプログラミング特有の問題を説明する行為はあまりにもプログラマー的な傲慢さの悪いところのように思うが、それはそれとして、この行為は問題解決に対して有用になることがある。\nとある問題を他人に説明するには、様々な部分の言語化を行う必要がある。例えば、行動の目的、環境、それに対するアプローチ、実際に発生した事象、など、、、\nさらに、これらの言語化のためにはまず今の状態を客観的に捉える必要がある。主に情報収集や、なにかの物差しと比べるような行動になる気がする。\nこのような段取りを踏んでいる間に自ずと問題がよく整理され、より深い理解へと繋がることで、問題が解決する事がある。「あれ？この環境に対してこのアプローチを取るには〇〇が足りてないんじゃないか？」といった具合で。\nここまでの例ではプログラマーは人間を説明の相手に使うが、Wikipediaにもあるように↓\n無生物を用いることにより、プログラマーは、他人を煩わせることなく目的を達成できる。\n\n\nというわけでラバー製のアヒルのおもちゃやテディーベアといったものも相談相手として使用する。合理的だ、、、さすがプログラマー。\nこれはなにもプログラミングに限った話ではなく、この世の問題全てにおいて適用可能なデバッグ方法だと思っている。特に、ある程度までの大きさの心の問題についてはそこそこ有効だとも思っている*1。ふわふわと頭に浮かんでいる悩み事は、その問題に対する考えの整理がうまく行っていない事が間接的な原因の場合もあり、であればその整理を行うことで解決の糸口を掴める場合がある。例えば、雑談相手に愚痴をぶつけるだけで案外気が晴れたりするものだろう。それは意図しない形で無意識的に解決している場合なのかもしれない。\n個人的な経験としても結構役立っている。バグを潰している時に作業通話の相手になっていた人に説明を試むことで明確な問題点を発見できたり*2、ツイキャスでさいきんの悩みを喋っていたら実は簡単な解決方法があることに気づいたり*3、ブログの記事として数ヶ月間くらい問題になっていたことをそのまま書いていたら実は解決可能であることが分かったり*4……そういえば、一時期カウンセリングに通っていたときもよくこういう体験あったなあ\nこれは他人の例だが、よくお世話になっているDiscordサーバー内の通話チャンネルで、「最近どのサーバーでもほとんど喋ろうとしてなかった」と言う人が珍しく参加しており、さらに他の参加者に対して相談事をしていた。実際に「相談をした」というだけで本人の負担が少なくなったらしい(程度はわからんけど)。\n本人はドツボにはまっているが、他の人から見たら解決方法が明確だった、という場合はそこそこあると思うが、その理由はきっとこのようなものなんだと思う。また、そのような説明を受けた時、相談した側も既に解決しているかもしれない。\n言語化は案外めんどくさいことで、頭の中のコストをそれなりに消費する。その理由の大きな部分が上述してきた問題の整理にあると思う。話し相手というのは、この良いとっかかりとなってくれるのだと思う。多分、仲の良い人とはそこそこ積極的に雑談をしたほうが良いのだろう。\n*1:一応断っておくと、もちろんこんなことでは解決できない問題というのもある。それは多分大きな問題なので、もうちょっと大枠から考慮したほうが良いと思う。\n*2:よくある話\n*3:このあいだのアニメの話\n*4:このあいだのMODの話",
          "link": "https://naari.hatenablog.com/entry/2022/01/20/035959",
          "publishedOn": "2022-01-19T18:59:59.000Z",
          "wordCount": 120,
          "title": "アヒルのおもちゃとかテディーベアとかと話して解決するやつ",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438052506961",
          "author": null,
          "description": "昨日、自作のmodについてのうすい記事を書いた。\nnaari.hatenablog.com\nこのmodを公開するに至って大変だったことをつらつらとかきます\nfabricのMixinやInjectsの概念についてのドキュメントが少なすぎる\n検索して出る情報が少なすぎる\n村人のgetOffers()を叩くだけだとダメ\n用語: MerchantEntity について\n通信の流れ\n擬似的に右クリックする\n画面上になにかを描画するのが難しい\n1.18になって何故か引数の順番が変わっててワロタ\nmodをCurseForgeにpublishする方法\nCurseForge上にプロジェクトを作成する必要があった\nGitHub Actions を利用して公開する\nこれも人様の実装を参考にする\nitsmeow/curseforge-upload を使用してCurseForgeに生成物をアップロードする\ngame_version がすごく難しい\n人のmodがオープンソースじゃなくて悲しい\nConfigを実装しなければならない\nまとめ\nfabricのMixinやInjectsの概念についてのドキュメントが少なすぎる\nfabricにはMixinや、Injectsという概念がある。これは元々のMinecraftのコードに自分の好きな挙動を差し込むことができる。\nたとえば以下のようなコードがあった場合、\nclass Example {\n  void blah() {\n    System.out.println(\"hogefuga\");\n  }\n}\n\n\n\n以下のようなコードを書くことができる。\n@Mixin(Example.class)\nabstract class ExampleMixin {\n  @Inject(at = @At(\"HEAD\"), method = \"blah\")\n  void yo(…",
          "link": "https://naari.hatenablog.com/entry/2022/01/15/015043",
          "publishedOn": "2022-01-14T16:50:43.000Z",
          "wordCount": 659,
          "title": "公開できるmodを初めて作ったので大変だったところを書いておく",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20220115/20220115003628.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20220115/20220115003628.png"
        },
        {
          "id": "hatenablog://entry/13574176438052506911",
          "author": null,
          "description": "OffersHUD\n最初と最後にダウンロードリンクを貼っておきます。\nCurseForge か GitHub からダウンロード出来ます。ぜひ\nhttps://www.curseforge.com/minecraft/mc-mods/offershud\ngithub.com\nつくったよ\n村人(など)にフォーカスを当てるだけで何を取り引きできるのか左上に出てくるようになるmodをつくった。\n\n動機としては司書の厳選が主で、狙いのエンチャが出るまでやらなければならないこの作業をかなり簡略化出来るのではないかと思って作り始めた。\nこれは便利\nまだexperimental版ということもあって、機能の切り替えとかGUIの位置調整とかそういう設定機能はひとつもない。僕の今後に期待。\n今の所はfabricの 1.17.1, 1.18.1 に対してjarファイルをビルドしていて、つまり 1.17.1, 1.18, 1.18.1 がこのmodを使えることになるはず。\nもし気になったら使ってみてください。バグがあったら必ず僕に教えて下さい。最悪条件とかが分からなくても良いので。お願いします。\n既知の問題\nGitHubのissues が最新の状況。今のところは\n英雄とかいろいろで価格の変動があった時、その価格がうまいこと反映されない\nメニューがない　設定が弄れない\nInventoryHUD+ のポーション表示モードとバッティングしてこのmodのそれが表示されない\n\n\nまあ仕方ない節はあるけど\n大変だった\n「ほんのちょっとだけどmoddingやったことあるし、開発のための環境構築が出来たんだから余裕で作れるでしょ。たぶんVillagerEntityに取引一覧を取得するためのメソッドも生えてるだろうし。」と思って取り組んだが、実はそんなに簡単じゃなかった。\n村人に対して右クリックをすると、サーバーに対して「私はこのエンティティに右クリックをした」という趣旨を伝えるリクエストが流れるが、それに対するレスポンスこそが信頼できる取引一覧であって、それを上手く掴む必要があった。\n↑この一文だけで詳しい人なら「あーパケットを掴まないといけないのね」みたいな勘が働いて理解できるだろうし、開発→公開までの苦労についてはまた別の記事にしようかな。→した。\nnaari.hatenablog.com\nきになったらこちらから\nCurseForge か GitHub からダウンロード出来ます。ぜひ\nhttps://www.curseforge.com/minecraft/mc-mods/offershud\ngithub.com",
          "link": "https://naari.hatenablog.com/entry/2022/01/14/055947",
          "publishedOn": "2022-01-13T20:59:47.000Z",
          "wordCount": 160,
          "title": "村人の取引内容をHUDで表示できるmodを作った OffersHUD",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20220114/20220114053941.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20220114/20220114053941.png"
        },
        {
          "id": "hatenablog://entry/13574176438051860871",
          "author": null,
          "description": "きゅうりまとめ\n昨日きゅうりをたべた\n\n\n洗って\n上下のヘタを切って\nまるかじり\n九州のおじいちゃんが母親への仕送りとしてくれることが多々あり、その中に入っているきゅうりが大好きだった\n\n\nおじいちゃんは農家でスーパーを介さずに仕入れられたきゅうりをもらってた\n形は不揃いだが、スーパーで買うものよりもうまかった記憶がある\nこのまえ見つけた近所の肉の直売所に立ち寄った際、ついでに野菜を買った\n\n\nこの野菜が東北の農家さんが直接持ってきたくれた野菜だった\nつまりこれもスーパーを介さずに仕入れられたきゅうり\nおじいちゃんの作ったきゅうりと同じような味でとてもよかった\n\n\nこれがオーガニックの味…\nやっぱりスーパーに並ぶやつは農薬とかそういう味になるのだろうか\nマヨネーズとか塩とかをかけてもいいけど、そのままもうまいのだ\nなので、ヘタの部分だけ切り落としてしまえばいつでも食える\n\n\n最強の料理\n最高～\n以上です。",
          "link": "https://naari.hatenablog.com/entry/2022/01/14/045619",
          "publishedOn": "2022-01-13T19:56:19.000Z",
          "wordCount": 96,
          "title": "きゅうりが本当にうまい",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438051621276",
          "author": null,
          "description": "tl;dr\ngit:// がGitHubで使えなくなった\ngit:// の変わりに https:// を使うようにした\nパブリックなリポジトリ以外に対しての変更の可能性もある\nThe unauthenticated git protocol on port 9418 is no longer supported.\n今朝からRubyのアプリをビルドするジョブが以下のようなエラーを吐くようになった。\nFetching git://github.com/sinatra/sinatra.git\nfatal: remote error: \n  The unauthenticated git protocol on port 9418 is no longer supported.\nPlease see https://github.blog/2021-09-01-improving-git-protocol-security-github/ for more information.\n既に趣旨を伝えるエラーの文言が見えるが、念の為に手元のマシンでも試してみる。\n$ git clone git://github.com/sinatra/sinatra.git\nCloning into 'sinatra'...\nfatal: remote error:\n  The unauthenticated git protocol on port 9418 is no longer supported.\nPlease see https://github.blog/2021-09-01-improving-git-protocol-security-github/ for more information.\n同じ結果だった。\n原因としては GitHub が git プロトコルを明示的に使えないようにしたため。\ngithub.blog\nNo more unauthenticated Git\nOn the Git protocol side, unencrypted git:// offers no integrity or authentication, making it subject to tampering. We expect very few people are still using this protocol, especially given that you can’t push (it’s read-only on GitHub). We’ll be disabling support for this protocol.\n\n\nまだ使っていてすまん…使うのやめます…\nということで、置き換えることにした。\nhttps:// に置き換える\nまず、現状の手順で最小の変更手数になりそうな「ジョブランナー側を変更する」を検討した。unencrypted な git プロトコルと記述があったので、もしかして暗号化される git プロトコルも存在するのでは？と軽く調査したが、見る限りでは見当たらなかった。そのため、各個別の git:// を使用している箇所について対応をする方針で進める。\n今回はpublicなリポジトリに対してのcloneの操作だったので、特に考えることもなく https:// に置き換えることで対応完了とした。\n今回の場合、gitプロトコル経由でリポジトリを取得しているのはGemfile経由のbundle installだったので、Gemfileの先頭あたりに以下の行を追加した。\ngit_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n\n\nその他にも\n先程のgithubのblog曰く、sshのプロトコルかつ鍵経由でやり取りをしている場合であっても古いタイプの鍵を使っている場合は影響を受けるらしい。\n今回の削除方向の変更は具体的には以下の通り。\nDSA keyの対応をすべて削除\n-RSA keys)を使っている場合、SHA-2の署名を使う必要があるように変更\nSSHのアルゴリズムでHMAC-SHA-1と全てのCBCの対応を削除\nもし上記に当てはまる場合は以下の項目を参考にしたほうが良さそう。\nhttps://github.blog/2021-09-01-improving-git-protocol-security-github/#how-do-i-prepare",
          "link": "https://naari.hatenablog.com/entry/2022/01/11/140137",
          "publishedOn": "2022-01-11T05:01:37.000Z",
          "wordCount": 277,
          "title": "GitHubで `git://` が使えなくなったので `https://` などに置き換える必要があった",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438051170735",
          "author": null,
          "description": "やべ～～～～～～～～すげ～～～～～～～～\n全部がメタファーすぎ\n自分ごとになってしまいすぎ\n曲すご 曲凄すぎ\n恐ろしい\nすげー綺麗に締まったな\n超良かった～\nこれは余談で、モニタースピーカーのある知り合い宅で画面を暗くしてそれなりに大きな音を出して見たんですけど、音の大きさとか画面の感じとか、かなり良かったです。今できる個人規模として最も良かったかも。スピーカーほしすぎ。",
          "link": "https://naari.hatenablog.com/entry/2022/01/10/060940",
          "publishedOn": "2022-01-09T21:09:40.000Z",
          "wordCount": 96,
          "title": "【ネタバレなし】レヴュースタァライトのアニメと総集編と映画を見た",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438050567150",
          "author": null,
          "description": "自分の周りの人のアニメを見ている率って結構高くて、特定のアニメの話で盛り上がっているのを見る度に自分からも興味が湧いてくる。\nが、しかしどうしても腰が重くて、見るまでに莫大な時間を要してしまう。去年見たアニメは1, 2本くらいしかなかった。\nむかし実家に居た頃は弟が地上波で流れるアニメを録画しており、それが流れているので一緒に見る、続きが気になるので時間を合わせて一緒に見る、みたいなことをしていて、局所的にアニメをたくさん見ている時期があった(2016年くらい？)。その頃は凄く楽しく見ていたし、別にアニメが嫌いなわけではないはず。むしろ見てしまえば何でも好きになれるし*1、体験としても良かったと思う。\n一人暮らしをしていると自分以外の生活は垂れ流しにならないので、巻き添えを食らうことがほとんどない状況にある。そうすると、自ずとアニメを見る必要があり、これが大変に大変だと思っている。\nアニメを見るための術や環境は(今となっては)とても整備されるようになったはずで、dアニメストアなりに加入しておけばおおよそ見れると聞いているし、そうでなくてもニコニコチャンネルだとかアマプラだとかたくさんの手段が用意されているように見える。\nそういう問題がクリアになった昨今、単にアニメを見るために「目と耳と頭をすべて使う」ことが大変なのだと思っていた。思っていたが、そうすると普段自分がYouTubeなどで見ているMinecraftの実況動画とか、DTMのチュートリアルとかはすごく気軽に見ているので、これだけだと説明がつかない。\nそれでさっきツイキャスをして言葉に出しながら考えていたら、一旦次のような結論に落ち着いた。\n自分がこの状況下に陥った前提で、他の人達が高い解像度を持ってアニメを見て、アニメの考察をし、それを共有する様子をリスペクトしすぎているのではないか？\nこういったコンテンツって本来ど…",
          "link": "https://naari.hatenablog.com/entry/2022/01/08/122306",
          "publishedOn": "2022-01-08T03:23:06.000Z",
          "wordCount": 129,
          "title": "アニメを見るのって難しくないですか？",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438048780758",
          "author": null,
          "description": "naari.hatenablog.com\nやったるぞ\n\nつくったもの/やったこと (wip含む)\nppt-undo\nGitHub - naari3/ppt-undo\n個人的にやってるぷよテトで練習をしている時に「今パフェあったよね？」とか言われても時既に遅しでミノを置いてしまったりするんだけど、それを1手戻す(undoする)ためのツールを作ろうとしていた。\nこのために以下のことをやる必要があった。\n7bagの生成ロジックの特定\n\n\nシードの特定\nシードの使われ方を調べる\nすべての生成ロジックの再実装\n以て「ひとつ戻る」を実装する\nこの再実装あたりについては、元々のゲームがあまり素晴らしい管理方法をしていない&自分が上書きしきる方法を思いつけなかったのでネクストミノの置き換えをはじめすべてをこちらの匙加減で書き換える方針で進めたためそうなった。全部の処理を追って実装するのが大変で、結局最後まで実装しきれなかった。一応戻るが、どこかのタイミングで壊れる、みたいな感じ。今だったら作り直せるかも。\nこれに使った要素はこんな感じ。\nWindows API\n\n\nきらい\nRust\n\n\nすき\nCheatEngine\n\n\nロジックを追うためデバッガーとして使った\nかなりすき\nskyish\nGitHub - naari3/skyish\nMinecraftのpluginで、生成されたチャンクのうち99%を削除してスカイブロックっぽく遊ぶために作ったもの。思いつきで作った。\n最初はチャンク生成時のなにかに合わせて生成を阻害すれば良いかなと思ったんだけど、文献としてあまり妥当なものが見つからなかったのが大変だった気がする。特にpluginだとサーバー側のバニラの生成処理を上書きするのは大変そうだった。わざと同梱しないようにしているらしい。逆にそれも同梱しているものをnms（net.minecraft…",
          "link": "https://naari.hatenablog.com/entry/2022/01/02/225301",
          "publishedOn": "2022-01-02T13:53:01.000Z",
          "wordCount": 368,
          "title": "2021年の振り返り テクい編",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20220102/20220102224744.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20220102/20220102224744.png"
        },
        {
          "id": "hatenablog://entry/13574176438048519889",
          "author": null,
          "description": "あけおめ～年末はゲーム系のストリーム配信をたくさん見た。\n自分は昔からRTA系の大きなイベントをよく見るが、その流れがずっと続いていたため例に漏れず今年もRiJを見た。\nその期間中に行われた獣道4も見た。このイベントに常々追ってるテトリス勢のkazuとあめみやたいようのビッグマッチが組み込まれており、このために見る必要があった。これはこれで本当に凄かったから別で書こうかな\nRTA in Japan Winter 2021\nさっき書いたとおり、昔からよくRTAのイベントを見ていた（具体的にはAGDQ2015あたりから）。好きなゲームのRTAが英語圏で流行っていたのもあり、自分の習慣として根強い。今年も例に漏れずRTA in Japan Winter 2021を見た。\n基本的な姿勢として、気になるタイトルは事前に自分のカレンダーに挿し込んでいて、そうでないタイトルの場合はバックグラウンドだったりサブモニターに置いたりして基本ずっと視聴者数のカウンターを温め続けていた。そのため、全く知らないタイトルも結構見ている。\n以下、見て印象に残っているものをスケジュール順に感想と共に挙げる。今後アーカイブを見直す度にちょっとずつ追記されるかも\nクロノトリガー\n自分の思い出のゲームが壊される様は見ていて本当に気持ちが良い。LSSを一発で決める、乱数調整、からのグランとリオン戦の行動予測が本当に痺れた。最高。\nwww.youtube.com\nルートとか各技とかすごくわかりやすくまとめられているWikiがあり、かなり丁寧だった\nchrono.wikidot.com\nTrials Rising\n迫真バイク部でしか見たことのないゲームで、該当動画では大変に苦労している様をよく見ていた。それだけあって超絶技巧とも捉えられるスタイリッシュなプレイングは大変素晴らしかった。\nwww.youtube.com…",
          "link": "https://naari.hatenablog.com/entry/2022/01/02/030122",
          "publishedOn": "2022-01-01T18:01:22.000Z",
          "wordCount": 226,
          "title": "2021年末にRiJを見た",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438047347067",
          "author": null,
          "description": "昨日振り返ったので、今日は雑に目標を立てる。\n↓去年立てた、今年の目標\nnaari.hatenablog.com\nPCの環境をもうちょっとよくする\n録画鯖を作る\n音MADを作る\n\n\n去年1つしか作らなかったので\nYTPMV\nセリフ合わせ\n誘われの音源をちゃんと作る\n\n\n素振りとかもして多少くらいは満足したい\nレーベルとか何かのDIscordサーバーに音源を投げてみる\nなにかのイベントに出たい\n\n\nちゃんとmix作ったりね\nこのブログをちゃんとやる\n\n\n下書きを消費する\n本棚を完成させる\nそして荷解きを完遂する\n継続して生活にちょっと気をつける\n継続して食事に気をつける\n貯金のことを考えてみる\n転職のことを考えてみる\n趣味のプログラミングのプロダクトをもうちょっと真面目にすすめる\nSRE頑張る\n\n\nクラスタ引っ越し\n会社のほうでひとつ技術記事を書く",
          "link": "https://naari.hatenablog.com/entry/2021/12/29/191726",
          "publishedOn": "2021-12-29T10:17:26.000Z",
          "wordCount": 117,
          "title": "2022年の目標",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438047059031",
          "author": null,
          "description": "naari.hatenablog.com\n目標は振り返ることに意味があるのだ\n項目を振り返る\n今年やった技術的なことについては別記事にまとめる予定\n(追記↓)\nnaari.hatenablog.com\n音MADの映像を作る\nそろそろ川谷絵音と決別する\n183を消費する\n\n\nとあったけど、ニコニコに投稿出来た音MADはこれしかなかった。一応動く画は乗っているが…\nwww.nicovideo.jp\n183もひとつも進むことなく、残念ながら失敗です…\nDTMでトーナルやコード進行から逃げない\nこれは去年よりは出来た\n秋のM3(以下埋め込み)ではボキャ貧ながらもコードとかメロディっぽいものについて考えることが出来たし、通話相手の言っていることがなんとな～くでもわかるようになったのは良い傾向と言えよう。\nemotive.bandcamp.com\nレーベルにトラックを投げてみる\nやらなかった\n何度か考えてみたものの、まだその時期じゃない…実力が追いついていない…\nmixを3ヶ月に1つは作る\n雑にひとりでrekordboxを触ることはしていたが、ちゃんと組んだmixはひとつしかなかった\nwww.nicovideo.jp\n保険証を再発行する・マイナンバーカードを再発行する\nどちらも達成した！！\nちゃんと計算してないけどたぶん10ヶ月くらいは不所持の状態だった。ようやく病院に行けるようになったし、夜イベントで自分の年齢を証明できる術を取り戻せた、、、、\n引っ越しをする\nした！！！\n詳しくは書かないが、近くに新築のマンションが出来たのでそちらに移動した。\n引っ越しという最難関の行いもなんとかこなすことが出来た。ただ、まだ荷解きが終わっていない、、、\n部屋の不満は多少あれど、今もまだ満足しています。\nこのブログをちゃんとやる\n溜まっている下書きを消費する\n\n\n下書きの消費はほとんどやらなかったが…",
          "link": "https://naari.hatenablog.com/entry/2021/12/29/002237",
          "publishedOn": "2021-12-28T15:22:37.000Z",
          "wordCount": 206,
          "title": "2021年の振り返り",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/26006613785834089",
          "author": null,
          "description": "github.com\ntl;dr\npistonで60fps出なかった\nWindowsの Sleep はデフォルトだと精度が悪い\nsleepを呼ぶ前に timeBeginPeriod を呼んで精度を良くしたら60fps出るようになった\npistonで60fps出なかった\n趣味でNESのエミュレーターを作っていた時に発生した事象として、pistonというライブラリを使うと60fpsを出せないというものがあった。\n60fpsという要件を達成するには、1回の更新毎に約16.6msずつ待ち合わせる必要がある。考えられる実現方法としては、ゲームのロジックを実行する際にその処理が何ms掛かったのかを記録しておき、16.6msからその時間を引いた時間だけ処理を停止する、というものがシンプルで良さそうだ。\nuse std::time;\n\nfn main() {\n  let frame_rate = 60;\n  let sleep_ms = time::Duration::from_secs(1) / frame_rate;\n\n  loop {\n    let start = time::Instant::now();\n    game_logic(); // ちょっと時間がかかる\n    let elapsed = time::Instant::now() - start;\n    if sleep_ms < elapsed { // 経過時間より1fの規定時間のほうが長かったらスキップ\n        break;\n    }\n    time::thread::sleep(sleep_ms - elapsed); // 16.6ms - Nms 分だけ停止する\n  }\n}\n\n\n\nこの基本方針はRustのゲーム用ライブラリであるpistonも同じだった。同じようにフレーム毎の待ち合いに s…",
          "link": "https://naari.hatenablog.com/entry/2021/12/20/072028",
          "publishedOn": "2021-12-19T22:20:28.000Z",
          "wordCount": 253,
          "title": "Rustのゲーム用ライブラリpistonがWindowsの上だと60fps出なかったのを直した",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438034508917",
          "author": null,
          "description": "この記事は音MAD Advent Calendar 2021の18日目の記事です。\nadventar.org\n\n\n\n概要\n最近は音MADにあまり手がつかず、どちらかといえばDTMのような事ばかりやっているんですが*1、今回せっかくこの企画に誘われたので音MADにも手軽に活かせられそうな知見を雑に列挙したいと思います。\n原曲に寄り添う形でサンプルを配置することが基本となっている音MADの技法に対し、直接使えるのか怪しいものもありますが、皆様の目に触れることで有効活用されることを期待しています。\n尚、ページ内に音声ファイルの埋め込みが多数存在します。それぞれ音量が大きめですので、再生前にご自身のスピーカーの出力を小さめにしておいてください🙏🙏🙏\n以下、目安です。\n\n概要\nオーディオエフェクトとミックスに寄ったような話\nエフェクトをチェーンにする\n組み合わせ例: ディストーション と EQ\n組み合わせ例: ディストーション と リバーブ\nコンプレッサーのサイドチェインについて\n音MAD制作での使用例\n音MAD制作でさらに手を抜くために使う\n参考\n帯域ごとの聞こえ方の表\n個別のオーディオエフェクトとか音作り関連の話\nLRチャンネルどちらか片方の位相を反転させることによる音声のステレオ化\nConvolution ReverbとIRの話\n色々な音をIRとして使ってみる\nそれ以外のエフェクトについて自分で試すときに心がけると良さそうなこと\nやってみる\nドキュメントも読んでみる(蛇足)\nWAVESの高いバンドルを積極的に買う理由はあんまりない気がしている事とその理由\nMelda Production MFreeFXBundle\nKiloHearts Toolbox\nSoundtoys\nReaPack JSFXたち\nさいごに\nふろく\nオーディオエフェクトとミックスに寄ったような話\nエフ…",
          "link": "https://naari.hatenablog.com/entry/2021/12/18/222700",
          "publishedOn": "2021-12-18T13:27:00.000Z",
          "wordCount": 415,
          "title": "音TIP",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20211124/20211124014248.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20211124/20211124014248.png"
        },
        {
          "id": "hatenablog://entry/13574176438044015274",
          "author": null,
          "description": "概要\n最近の自分は音MADを含め音源制作にAbleton LiveというDAWを使っているのですが、音MADを作る点ではREAPERを使用したほうが良いのではないか？と常々思っているので、その理由を複数連ねてみます。\nあくまで自分の考える音MAD制作過程に軸を置いた時の個人的な考えであり、それがDAWの絶対的な優劣ではないということを念頭に置いてから見ていただきたいです 🙏\nこの記事は音MAD Advent Calendar 2021で自分が書いた記事の付録記事です。\nnaari.hatenablog.com\nショートカットキーによるピッチ変更\n個人的にはこの存在が音MADの制作工程に最も大きく作用しているのではないかと思っています。もはや音MADの基本アプローチと言っても過言ではなさそう。\n普段からREAPERを使っている方々はあまり意識したこと無いかもしれませんが、これが音MADの出来具合いにも関わってくるものだと思っています。\n例えばREAPERで音合わせをする場合、アプローチとしては例として以下のようなものが考えられます。\nショートカットキーによるオーディオアイテムのピッチ変更\nサンプラーとMIDIアイテムによるピッチ変更\n単純に音合わせに焦点を合わせた場合、後者の方が大変にお手軽ではあると思うのですが、手軽さ故に細かい部分の対応がなおざりになってしまう場合があると思っています。例えば主旋律に対して素材を当てはめている時、以下のような…\nここの部分だけもう少し素材の頭出しを変えたいが、わざわざサンプラーの画面を開くのが面倒\n面倒臭いので同じ音ばかり使ってしまう\n結果として単調な結果になってしまう！！！\n対比として、直接オーディオアイテムのピッチを変える場合、アイテム単体のスタート位置の変更は造作もないことだと思います。\nここで、ピッチ変更の手段としてのショートカッ…",
          "link": "https://naari.hatenablog.com/entry/2021/12/18/222611",
          "publishedOn": "2021-12-18T13:26:11.000Z",
          "wordCount": 170,
          "title": "Ableton Liveを使っていて分かった、音MAD制作においてREAPERを使うことのメリット",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20211124/20211124044752.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20211124/20211124044752.png"
        },
        {
          "id": "hatenablog://entry/13574176438042532907",
          "author": null,
          "description": "概要\nREAPER のグリッド線の幅は GUI 左上ツールバーのマグネットマークを右クリック、または Alt+L を押すことで開かれる「スナップ/グリッド設定」で変更が出来るのですが、変更の度にわざわざこの設定を開くのはなかなか骨が折れる手順なのではないかと思っています。\n自分は主に Ableton Live を使用して DTM の作業を行っているのですが、こちらはショートカットキーを押すことでグリッド幅を広げることが出来ます。\n今回はこれと似たような設定を REAPER でも実現できるように設定してみようと思います。\nこの記事は音MAD Advent Calendar 2021で自分が書いた記事の付録記事です。\n今回のゴール\nもう少し具体的には以下の 3 つをショートカットキーによって実現できるように設定したいと思います。\nグリッド幅を 1/2 にし、狭める\nグリッド幅を 2 倍にし、広げる\n三連符幅の切り替えを行う\nグリッド幅を 1/2 にし、狭める\nこんな感じ\n狭くなっていく\nグリッド幅を 2 倍にし、広げる\nこんな感じ\n広くなっていく\n三連符幅の切り替えを行う\nこんな感じ\n三連符幅との切り替えが出来る\n手順\n途中で ReaPack を使用する手順と、そうでない手順に分かれるので、どちらか該当する方だけ読んでください。\n独自のスクリプト\n1. 既存のアクションをショートカットキーに割り当てる\nまず、?キーを押すか、 アクション > アクションリストを開く からアクションリストを開きます。\n次に、絞込 に Grid: Adjust と入力し、以下の 2 つのアクションを見つけます。\nGrid: Adjust by 1/2\n\n\nグリッド幅を 1/2 にする\nGrid: Adjust by 2\n\n\nグリッド幅を 2 倍にする\nそれぞれのアクションをシングルクリックした後に左…",
          "link": "https://naari.hatenablog.com/entry/2021/12/14/040731",
          "publishedOn": "2021-12-18T13:00:00.000Z",
          "wordCount": 337,
          "title": "REAPERのグリッド線をショートカットキーで変更できるようにする",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20211214/20211214035953.gif",
            "type": "image/gif",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/n/naari_3/20211214/20211214035953.gif"
        }
      ]
    },
    {
      "title": "yokkin.com",
      "feedUrl": "https://yokkin.com/feed",
      "siteUrl": "https://yokkin.com",
      "articles": [
        {
          "id": "https://yokkin.com/?p=1967",
          "author": "Yokkin",
          "description": "はじめに 2021年は自分の環境が大きく変わって、自分にとって飛躍の年だったかなと思う。デスクトップPCを組んで、いろいろ音源を買って多彩な音を作ることができるようになった。3月にはアルバム「折々」もリリースした。また、 […]",
          "link": "https://yokkin.com/blog/happy-new-year-2021.html",
          "publishedOn": "2022-01-01T16:46:57.000Z",
          "wordCount": 102,
          "title": "あけましておめでとうございます",
          "imageUrl": "https://yokkin.com/wp-content/uploads/2022/01/akeome.png"
        }
      ]
    },
    {
      "title": "みそは入ってませんけど",
      "feedUrl": "https://not-miso-inside.netlify.app/rss.xml",
      "siteUrl": "https://not-miso-inside.netlify.com",
      "articles": []
    },
    {
      "title": "LWのサイゼリヤ",
      "feedUrl": "https://saize-lw.hatenablog.com/rss",
      "siteUrl": "https://saize-lw.hatenablog.com/",
      "articles": [
        {
          "id": "hatenablog://entry/13574176438060712418",
          "author": null,
          "description": "お題箱回94\n\n379.「親ガチャ」について偉そうに語ってる精神科医の話をいくつか聞いてしまったのでぜひLWさんに解説していただきたいです！\n380.ありがとうございます！>お題箱>親ガチャ\n僕が見たのは下記の二つです。他にもひろゆき氏や東大卒の方、武井壮氏、茂木健一郎氏…いろんな人が語ってて煩いです、叩っ斬ってください！\n・『メンタルドクターsidow「親ガチャハズレ」←どう思う？』　https://youtu.be/CV3y8fR6hTk\n・『精神科医が心の病気を解説するch「親ガチャ」について、精神科医目線で解説します』　https://youtu.be/IT2s0X7WVas\nざっと各界のコメントを調べて動画も軽く見ました。\n解説したり叩き斬ったりすることを期待されている手前申し訳ないですが、そういう話にはあまりならないですね。僕は「親ガチャ」という言葉を高く評価していることを何度かツイートしていますから、たぶんそこから「親ガチャ」という言葉に否定的な風潮に異を唱えるような展開が望まれたのだと思いますが、そもそも世間で語られている論点と僕の論点は全く違います。「親ガチャ」という言葉の背景に想定する文脈が異なり、同じ言葉を使って完全に別の話をしているので、僕が彼らを否定することも彼らが僕を否定することもないはずです。\nいま過去のツイートを見ると、去年9月頃には親ガチャという言葉がきっと社会を良い方向に導くだろうと期待していたのですが、\n親ガチャという発想は俺は完全に正しいと思うしこれを期にマイルドな反出生主義のような形で生む側の倫理を考える風潮はある程度定着するだろうなと思う\n2021年9月15日\n\n\n10月頃には僕が使う言葉の意味と市井で使われている言葉の意味が全く異なることに気付き始め、\n俺は親ガチャっていう言葉大好きだしようやく非存在者への想像力が市井で培われる…",
          "link": "https://saize-lw.hatenablog.com/entry/2022/02/11/212205",
          "publishedOn": "2022-02-11T12:22:05.000Z",
          "wordCount": 224,
          "title": "22/2/11 お題箱回94：親ガチャ、SunnyBoy、マーセナリーズなど",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20220211/20220211205734.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20220211/20220211205734.png"
        },
        {
          "id": "hatenablog://entry/13574176438052195267",
          "author": null,
          "description": "駿河屋への売却開始\n2021年の中頃から本格的に部屋の整理を始めた。\n\n物を捨てるのを一気にやろうとすると判断に迷って結局あまり進まないことが目に見えているので、数ヶ月スパンで徐々に進める方式を開発した。まず部屋の隅に巨大段ボールを設置し、日常暮らす中で「これは要らんかもしれん」と思うものを放り込み、ある程度溜まってきたら駿河屋に発送。\nこの手法が画期的なのは巨大段ボールに放り込んだ段階では必ずしも廃棄が確定しているわけではないことだ。どうしても捨てたくないと思えば発送する前にサルベージもできるので、あまり悩まずに気軽に放り込むことができる。ただ一度放り込めば「まあ要らんか」という気分になってくるもので、サルベージを果たしたアイテムはまだ無い。\n既に漫画や本や玩具や映画を詰めた大きな段ボール4つほどを駿河屋に送っており、これからも順次送っていく予定である。\n整理を始めた積極的な動機は部屋にトレーニング用ベンチを置きたいからだが、消極的な動機としては物理書籍から電子書籍への切り替えが進んでいることがある。特に漫画については電子専用機としてFireHD10も購入し、これからはもう新刊は全部電子でいこうと思っている。\n理由を挙げれば、買う手間とか取り回しとか細かいことは諸々あるが、一番大きいのは「物理的なオブジェクトに愛着をあまり持たなくなった」という時代的な感性の変化であろう。令和はクラウド化の時代、大抵のコンテンツはわざわざ所有せずともサブスクでネット上からオンデマンド消費するのが標準となった。漫画は未だ決定版のサブスクサービスが存在せず逐一購入する必要があるとはいえ、だからといって漫画だけが特別に物理的フェチズムを発揮し続けることもない。\nそんな経緯で10年以上も部屋の一角を占めていた物品でさえもドンドン段ボールに詰めてバンバン売るモードになっているが、一応は売却目録をメモ…",
          "link": "https://saize-lw.hatenablog.com/entry/2022/02/06/180731",
          "publishedOn": "2022-02-06T09:07:31.000Z",
          "wordCount": 320,
          "title": "22/2/6 2021年売却コンテンツまとめ",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20220206/20220206175206.jpg",
            "type": "image/jpeg",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20220206/20220206175206.jpg"
        },
        {
          "id": "hatenablog://entry/13574176438051154881",
          "author": null,
          "description": "お題箱回93\n\n369.LWさんオススメの生活快適化グッズとか効率化グッズみたいなの記事でまとめて欲しいです(書見台とかbasebreadみたいな)\n書きました！\nsaize-lw.hatenablog.com\nあと最近買って本当に良かったと思っているのがAdidasの超ロングベンチコートです。\nwww.amazon.co.jp\n（↑これではないですがこれみたいなやつです。店頭で適当に買ったので正確な商品情報がわからない）\n前から「居酒屋のキャッチが着てるコートが欲しい！」ってずっと思ってて、この前オタク合宿に行く前にいい機会なので新宿を探して2万円で買いました。期待以上にマジで暖かくて、体感は布団着てる感じです。雪が降ってる日でも半袖Tシャツの上にこれ着るだけで出かけられます。\n欠点はあまりにも断熱性能が高すぎて、少しでも日差しがあったり着たまま自転車を漕いだりすると暑くてすぐ汗をかくところくらいです。前を空けて冷気を取り込むことである程度はケアできますが、暖かすぎるが故に冬で特に一番寒いタイミングでしか着られないと思われます。三寒四温みたいな時期にはもっと貧弱な上着と併用する必要がありそう。\n \n\n370.バス江121話めちゃくちゃ良くないですか！？\n良かったと思います。実際レスバってああいうルールです。\nちなみにバス江読者向けに言うと、121話は戦隊ヒーローが敵に勝ったけど捨て台詞吐かれて釈然としない回です（6巻収録、ヤンジャンアプリなら無料で読めます）。\n\n\nスナックバス江 6 (ヤングジャンプコミックスDIGITAL)\n作者:フォビドゥン澁川\n集英社\nAmazon\n僕はバス江をかなり評価してて、全体的に良い中で特にその良さが出ている話の一つだと思います。バス江って普通ならサラッと流してしまう小さい取っ掛かりを絶対に捕まえて掘り下げるのが強みで、会話の解像度が高いで…",
          "link": "https://saize-lw.hatenablog.com/entry/2022/01/15/160444",
          "publishedOn": "2022-01-15T07:04:44.000Z",
          "wordCount": 195,
          "title": "22/1/15 お題箱回93：生活グッズ、表紙三枚ノートの現在etc",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20220115/20220115154818.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20220115/20220115154818.png"
        },
        {
          "id": "hatenablog://entry/26006613783130034",
          "author": null,
          "description": "2021年10～12月消費コンテンツ\nこの3ヶ月はアニメや映画を見る時間をほぼ全て統計学かネットワーク科学に回していたのでまとめます。\nまだ結構読書を続けたい気分だが、これが一過性のブームなのかアニメや映画から卒業するときが来てしまったのかは不明。なんか冬アニメ始まってることに気付いてなかったのでもうダメかもしれない。\n2021年10～12月消費コンテンツ\nメディア別リスト\nアニメ(短編115話)\n漫画(40冊)\n書籍(17冊)\n良かった順リスト\n人生に残るコンテンツ\n消費して良かったコンテンツ\n消費して損はなかったコンテンツ\nたまに思い出すかもしれないくらいのコンテンツ\n以降の人生でもう一度関わるかどうか怪しいコンテンツ\nピックアップ\nホロぐら(短編アニメ)\nバトゥーキ\n僕のヒーローアカデミア\n宇宙の眼\n統計学関連書籍\nネットワーク科学関連書籍\n生産コンテンツ\nゲーミング自殺、16連射ハルマゲドン\nキャラ紹介①　彼方ちゃん\nキャラ紹介②　立夏ちゃん\nキャラ紹介③　VAISさん\nキャラ紹介④　神威ちゃん\nキャラ紹介⑤　樹さん\nキャラ紹介⑥　此岸さん\nメディア別リスト\nアニメ(短編115話)\nホロぐら(短編アニメ・1～115話)\n漫画(40冊)\nバトゥーキ(1～10巻)\n僕のヒーローアカデミア(1～30巻)\n書籍(17冊)\n宇宙の眼\n家屋と妄想の精神病理\n不完全性定理とは何か\n＜統計学関連＞\n日本統計学会公式認定 統計検定1級対応 統計学\n日本統計学会公式認定 統計検定1級公式問題集(2012～2013, 2014～2015, 2018～2019)\n現代数理統計学の基礎\nやさしい実験計画法\n東京大学工学教程 確率・統計Ⅱ\n＜ネットワーク科学関連＞\n観光客の哲学\n「複雑ネットワーク」とは何か\n私たちはどうつながっているのか\n歴史は「べき乗則」で動く\nスモールワールド・ネットワー…",
          "link": "https://saize-lw.hatenablog.com/entry/2022/01/09/215724",
          "publishedOn": "2022-01-09T12:57:24.000Z",
          "wordCount": 314,
          "title": "22/1/9 2021年10～12月消費コンテンツ",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20220109/20220109172235.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20220109/20220109172235.png"
        },
        {
          "id": "hatenablog://entry/13574176438036231597",
          "author": null,
          "description": "お題箱回92\n359.とりでさんのドグマブレードシミュレーターが全くクリアできません\nドグマブレードを回すコツや定石を教えて欲しいです\nこれですね。\ntsd0313.github.io\n\nコツはドグマブレードというデッキを信用しないことです。\n僕も現代プレイヤーの感想を見て初めて知ったのですが、恐らく現代プレイヤーはドグマブレードの回転力をかなり過大評価する傾向があります。\nドグマブレードにはサーチやドローが大量搭載されており、綺麗に回ったときはするするとデッキを引き切って明確な終着点に向かっていくため、一見すると現代遊戯王を先取りしたオーパーツに見えるのかもしれません。つまり現代遊戯王において一枚初動から確立されたルートによって（妨害さえなければ）強力な先行展開が確定するのと同様、ドグマブレードも初動からゴールまで一直線に進めるデッキだと誤解されていることが少なくありません。\nしかしそのイメージは買い被りです。ドグマブレードは古の美しい先行OTKとして神格化されがちですが、どこまで行っても欠陥綱渡りデッキです。\nカスみたいな性能の手札入れ替えしかない時代に奇跡的に成立した引き切りコンボであり、常に一貫性を持って動けるように作られている現代のカードデザインとは大前提が違います。そもそも基本の動きがドローであり、確定サーチで保証された動きはほとんどありません。一手選択肢を間違えた瞬間に完全ストップして打ち手が無くなるため、動けているだけで御の字、欲張らずにとにかく動き続けることにだけ意識を割くべきです。\n例えば「魔力倹約術＋次元融合＋混黒＋ヴァリー」は揃えば勝ちが確定する無限ドローコンボですが、これを積極的に狙うのは危険です。特に動けるカードが少ない序盤で手札抹殺と魔力倹約術を持っていた場合、大抵は手札抹殺で魔力倹約術を捨ててドローに変換するのが正解です（いつか無限ドローが成…",
          "link": "https://saize-lw.hatenablog.com/entry/2022/01/02/160301",
          "publishedOn": "2022-01-02T07:03:01.000Z",
          "wordCount": 196,
          "title": "22/1/2 お題箱92：ドグマブレード、接続詞、萌えetc",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20220102/20220102154356.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20220102/20220102154356.png"
        },
        {
          "id": "hatenablog://entry/13574176438045200822",
          "author": null,
          "description": "統計検定1級の勝ち語り\n\n\n統計検定1級に合格し、数理と応用の両方で優秀賞を取得したので勝ち語りをします。\n4級・3級・2級・準1級・1級という区分を完全に無視して初手から最上位資格にいく賭けに出たが、大きく張った分だけリターンもデカい。\n統計検定1級合格\nいい暇潰しでした　たいあり pic.twitter.com/QJ4pAY3clP\n2021年12月22日\n\n\n受験を思い立ったのは6月に遡る。\n部屋にトレーニング用ベンチでも置こうかと思って本の整理をしていたところ、昔大学で買わされた統計の教科書を発見した。一応読んでから捨てようとしたが、しかしこれも何かの縁だしついでに資格でも取っとくかと統計学の勉強をスタートした。\n暇だし統計検定取っとくかみたいな感じはある\n次資格取りたくなったら取ろう\n2021年6月9日\n\n\nそこから試験のある11月まで4ヶ月近くもタラタラ勉強していたことになる。俺の周りでは誰も統計に興味が無く、むしろ俺が統計などという説明のし甲斐もないクソつまらない勉強をしている間はサイゼミの開催が滞っていたため（元々コロナ禍で一旦停止していたが）、「まだ統計やってんの？」「いつまでやってんの？」などと心無い声をかけられながら一人で戦っていた。\nsaize-lw.hatenablog.com\n試験は余裕だったと言いたいのは山々だが、実際のところ、かなり難しかったと言わざるを得ない。\n統計検定1級取得には統計数理と統計応用という合格率20%程度のフル論述試験を二つパスする必要があるのだが、どちらの試験もいわゆる資格試験というよりは大学院入試に近い。理系学部教養レベルの解析学と線形代数は自在に扱えなければスタート地点にも立てず、（試験範囲をまとめた公認教科書をわざわざ出版している癖に！）明らかに出題範囲表を逸脱した数学知識が要求されることもざらにある。「ここからここ…",
          "link": "https://saize-lw.hatenablog.com/entry/2021/12/27/201923",
          "publishedOn": "2021-12-27T11:19:23.000Z",
          "wordCount": 318,
          "title": "21/12/27 統計検定1級とかいうゲームに勝利した",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20211227/20211227201914.jpg",
            "type": "image/jpeg",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20211227/20211227201914.jpg"
        },
        {
          "id": "hatenablog://entry/13574176438044488653",
          "author": null,
          "description": "第11回サイゼミ\n2021年12月20日に新宿で第11回サイゼミを催した。コロナ禍の合間で半年ぶりの開催となる。\n\n題材は東浩紀の『観光客の哲学』。これに決まった経緯はよく覚えていないが、動ポモシリーズ以降の東の動向を追う回そろそろやっとくかみたいなノリだったはず。\n\n\nゲンロン0 観光客の哲学\n作者:東 浩紀\n株式会社ゲンロン\nAmazon\nいつも通り読んだ前提で俺の関心が高かった点について書くので、内容が知りたければ各自で読んでほしい（これは解説記事ではない）。\n特に今回は東が第四章『郵便的マルチチュードへ』でネットワーク理論をガッツリ援用して主張の正当化を試みていたため、俺は理系担当としてネットワーク理論を一通り勉強してその議論の妥当性を検討することにした。前回の複雑ネットワーク書籍群についての記事は『観光客の哲学』を読むためのものである。\nsaize-lw.hatenablog.com\n第11回サイゼミ\n第三章『二層構造』まで\n第四章『郵便的マルチチュードへ』\n①小さい平均距離はナショナリズムを示すか？\n②ネットワークの性質は必然的ではない\n③つなぎかえは万能の特効薬ではない\n④ネットワーク（のクラス）と生成方法は一対一対応しない\n⑤東がやるべきことは？\n数学的に怪しい記述について\n「それ（クラスター係数）は、あるネットワークにおいて、理論的に成立可能なクラスターのうち、実際にどれほどのクラスターが成立しているかを表す指標である」(p164)\n「三角形が高い密度で重なることで構成されている」(p164)\n「それでは、なぜ人間社会は狭いのか。じつはこの特徴は、数学では長いあいだモデル化することができなかった」(p165)\n「乱数を生成してそれがある特定の数よりも大きかったならば～」(p169,★5脚注)\n「ここで『確率』『つなぎかえ』『近道』といった言葉には、じつはそ…",
          "link": "https://saize-lw.hatenablog.com/entry/2021/12/20/182404",
          "publishedOn": "2021-12-20T09:24:04.000Z",
          "wordCount": 244,
          "title": "21/12/20 【第11回サイゼミ】東浩紀『観光客の哲学』は数学的に妥当か",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20211220/20211220124212.jpg",
            "type": "image/jpeg",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/s/saize_lw/20211220/20211220124212.jpg"
        }
      ]
    },
    {
      "title": "人間が折り重なって爆発した",
      "feedUrl": "https://hiragi-noon.hatenablog.com/rss",
      "siteUrl": "https://hiragi-noon.hatenablog.com/",
      "articles": []
    },
    {
      "title": "セミになっちゃた",
      "feedUrl": "https://xcloche.hateblo.jp/rss",
      "siteUrl": "https://xcloche.hateblo.jp/",
      "articles": [
        {
          "id": "hatenablog://entry/13574176438063420107",
          "author": null,
          "description": "2019年にM-1グランプリで優勝して以来、ミルクボーイを起用した漫才風CMを本当によく見るようになった。\nバツグンで、笑いも入れつつ適度に情報を提示しながら宣伝するのにちょうどいい構造のようである。 \nミルクボーイの漫才はもともと商品紹介にすぐれたフォーマットなのだが、さらに微調整してCMに適応しているようなのだ。\nということで、ミルクボーイのシステム漫才の仕組みを概観したのち、Web上で閲覧できるミルクボーイの漫才風CMと比較して、本ネタとの構造的な違いやCM化にあたって行われている工夫を見ていこう。\n本ネタとCM\nまずは比較のために、コーンフレークをテーマとしたこちらの二つの動画を見てみよう。\nwww.youtube.com\n本ネタ「コーンフレーク」\nwww.youtube.com\nCM「グラノラハーフ編 楽屋裏編」\nどのくらい「違い」があるだろうか？\nシステム漫才の流れ\nミルクボーイの本ネタをフローチャート化すると、次のようになる。\n\nツカミ\n漫才のツカミではまずは駒場が会場から何かを受け取るジェスチャーを行い、内海が「①あーありがとうございます、いま○○をいただきました　こんなんなんぼあってもいいですからね」と受ける。ここで受け取るのはもらっても困るもの、なんぼあってもいいわけないものなことが多い。\nメイン導入\nメイン構造の導入部は、駒場の「ウチのオカンが好きな（ジャンル名）があるらしい」から入り、そこからなんやかんやあって忘れてしまったその名前を内海が一緒に考える「ほな俺がね、オカンが一番好きな〇〇一緒に考えてあげるからどんな特徴いうてたか教えてみてよ」の流れになる。ネタによってはここで変化があり、「好きな（ジャンル名）がある」と聞いた時点で「わからへんのでしょう？」で受ける（ミルクボーイのいつものシステムを対象化した）パターンや、「オカンが好きな（ジャンル名）…",
          "link": "https://xcloche.hateblo.jp/entry/2022/02/14/211038",
          "publishedOn": "2022-02-14T12:10:38.000Z",
          "wordCount": 187,
          "title": "ミルクボーイの漫才風CM全部みる",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/x/xcloche/20220214/20220214193221.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/x/xcloche/20220214/20220214193221.png"
        },
        {
          "id": "hatenablog://entry/13574176438056202792",
          "author": null,
          "description": "最近、twitterで🟩🟩🟨⬜⬜みたいな謎の色付き正方形がいっぱいシェアされてくるようになりました。\n\n\n\nWordle 218 3/6\n⬜⬜⬜⬜⬜\n🟩⬜🟨⬜🟨\n🟩🟩🟩🟩🟩\n— 氷点下カチコチかもリバー (@xcloche) 2022年1月22日\n  \nこれは「Wordle」というパズルゲームで、５文字の単語を入力して得られた手がかりから、正解の５文字の単語を当てるゲーム（その文字が正解に含まれていて位置もあっていたら🟩、含まれているが位置はあっていないときは🟨でヒントが出る*1）です。\n\n\nwww.powerlanguage.co.uk\n\n\naseruneko.github.io\n\n\nこの記事では、インターネット上で囁かれているさまざまなWordleの戦略を概観・レビューした後、情報量を用いたもっとも効率的な単語の選び方を実践・解説します。\n\n\nパッと思いつく戦略\nプレイしていてまず思いつく戦術はこんなところでしょうか：\n\n\n①いろんな単語によく含まれる文字はヒントになりやすいはず\n\n\n\nqとかzが含まれる単語は少ないので、手がかりに入れてもあんまり参考にならなそうなので\n②一度🟩で確定したところに次またその文字を置くのは損\n\n\n\n\nわかっていない⬜を🟨にするチャンスを逃しているので\n\n\nヒントを集めたあと、最後に当てるときだけ入れたほうがよさそう\n\n\n\n\n③なるべく多くまだ使ってない文字を入れたほうがいい\n\n\n\n⬜で単語中に使われていないことが確定した文字を使うのは、ヒントを得るチャンスを逃しているので\nWordleでは最初は色のヒントなしで単語を入力するわけですが、では、このときにより多くの情報が得られる「初手」の単語は何がいいでしょうか？\nヒューリスティックな手法による初手５文字が提唱されています。\n\n\n文字ベースの手法\n試み①：出てく…",
          "link": "https://xcloche.hateblo.jp/entry/2022/01/24/212558",
          "publishedOn": "2022-01-24T12:25:58.000Z",
          "wordCount": 401,
          "title": "Wordleの最善手をめぐる巷説と、真の答え",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/x/xcloche/20220124/20220124211547.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/x/xcloche/20220124/20220124211547.png"
        }
      ]
    },
    {
      "title": "野の百合、空の鳥",
      "feedUrl": "https://www.zaikakotoo.com/rss",
      "siteUrl": "https://www.zaikakotoo.com/",
      "articles": [
        {
          "id": "hatenablog://entry/13574176438054066007",
          "author": null,
          "description": "はじめに. 「メリーさんの羊」を中心に……\n12～13話で起こった出来事をまとめるのは簡単だ。つまり、陽毬がまた倒れて、眞悧がそれを助けた。それだけだ。\nしかしながら、12～13話には、起こった出来事としてまとめられないエッセンス——それも非常に重要なエッセンス——があまりにも多い。それこそ、あるエッセンスがほかのエッセンスとつながって、ぐるぐる輪るほどには（あえて特記するならば、16年前、つまり1995年の事件の主犯格が高倉家の父剣山であったという事実は12話で初めて分かった）。\nだから今回は、「メリーさんの羊」という、12～13話に特異なエッセンスを中心に据えて、そこから輪を広げるようにして12～13話について考察してみたい。突如として晶馬の口から語られる寓話めいたその話は、いろいろなこと（物語のレベルにおいても現実のレベルにおいても）を示唆しているように思われるのだ。そして最終的には、13話のサブタイトルの一部にもなっている「罪と罰」について、少し——というのはそれは12～13話だけで片付くような簡単な問題ではないから——解明することを目標にしたい。\n \n\n\n\n \nはじめに. 「メリーさんの羊」を中心に……\n1.0. 「メリーさんの羊」について\n1.1. 「メリーさんの羊」要約\n1.2. 元ネタはあるか？\n1.3. 対応表\n2.0. 「メリーさんの羊」をめぐる考察\n2.1. 「リンゴの樹」とは何か（その輝きが世界の未来、夢、愛を照らしていたとはどういうことか）？\n2.2. メリーさんがとった行動（リンゴの樹が枯れているのを嘆き、灰を盗んだ）の意味は？\n2.3. 女神様とは何者か（なぜ罰は「一番理不尽じゃないと」いけないのか、なぜ「これで罰が終わりじゃつまらない」のか）？\n3.0. 「僕と君の罪と罰」\n親の「罪」は子の「罪」なのか？\n一口に「罪」と「罰」といえども……\n…",
          "link": "https://www.zaikakotoo.com/entry/penguindrum/re/zero/10",
          "publishedOn": "2022-01-19T11:21:43.000Z",
          "wordCount": 318,
          "title": "ゼロから見直す『輪るピングドラム』⑩メリーさんの羊とは？【12～13話】",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/z/zaikakotoo/20220119/20220119201328.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/z/zaikakotoo/20220119/20220119201328.png"
        },
        {
          "id": "hatenablog://entry/13574176438047258991",
          "author": null,
          "description": "現実と虚構、リアルとフィクション\n「これはパイプではない」\n\nRené Magritte, La Trahison des images\n\nこの一枚から始めよう。\n《イメージの裏切り》と題されたルネ・マグリットのあまりにも有名なこの絵画は、なんとも逆説的な場をそこに展開している。\n描かれたイメージは、明らかにパイプのように「見える」。にもかかわらず、キャプションによれば「これはパイプではない（Ceci n'est pas une pipe）」。\nなるほど、たとえばそれがパイプに見せかけた \"急須\" であるとしたら、またはパイプ型の \"じょうろ\" だとしたら、たしかにそれはパイプではない。あるいはパイプでなければいいのなら、もっと想像力を働かせて、それはパイプの形にされた人間であるとか、アライグマの進化系だとか、そういうことを言ってもよいはずだ。けれどそれは、仮にキャプションを \"信用すれば\" の話である。\nそもそも「これ（Ceci）」という指示語がそこに描かれたイメージを指すとは誰も言っていない。つまり「これ（Ceci）」という \"語そのもの\" が「パイプではない（n'est pas une pipe）」と言っているのかもしれないし、指示語である「これ（Ceci）」が「これはパイプではない（Ceci n'est pas une pipe）」という一文を指しているとすれば、「これはパイプではない（Ceci n'est pas une pipe）」という文章自体が「パイプではない（n'est pas une pipe）」と言っているのかもしれない*1。その場合、キャプションはイメージを殺しているのか、あるいはイメージがキャプションを殺しているのか、考えたくなる*2。\nとすれば、私たちを攪乱する元凶は明らかであろう。「これはパイプではない（Ceci n'est pas une p…",
          "link": "https://www.zaikakotoo.com/entry/look/back/2021",
          "publishedOn": "2021-12-31T10:21:36.000Z",
          "wordCount": 526,
          "title": "2021年をふりかえって",
          "enclosure": {
            "url": "https://images-fe.ssl-images-amazon.com/images/I/5145ExCvFcL._SL500_.jpg",
            "type": "image/jpeg",
            "length": "0"
          },
          "imageUrl": "https://images-fe.ssl-images-amazon.com/images/I/5145ExCvFcL._SL500_.jpg"
        }
      ]
    },
    {
      "title": "おおたまラジオ",
      "feedUrl": "https://futbolman.hatenablog.com/rss",
      "siteUrl": "https://futbolman.hatenablog.com/",
      "articles": [
        {
          "id": "hatenablog://entry/13574176438053595460",
          "author": null,
          "description": "これまで続いてきたこの『俺ガイル』試論もまとめに入るときがきました。\n『俺ガイル』とはどんな作品だったのでしょうか。その問いをみつめていきましょう。\n前島賢が朝日新聞で連載していた書評では、『「残念」なキャラクターたちの部活もの』という紹介がされていました。ここでは「残念」な作品群・キャラクターたちの系譜には立ち入りませんが、「残念」をキーワードに文化論的に2010年代を「予見」していく試みをイマ・ココ的にしたのがさやわか『一〇年代文化論』でありました。\nさやわかの『一〇年代文化論』が画期的だったと思うのは、ゼロ年代批評のイデオロギー的な「反省」を試みようとしたことでしょう。もちろん、既に2010年代の息吹や予感があるとするならば、2010年代になってから突如に噴出するものではなく、その直前に至る文脈を経由するようにしてゼロ年代半ばから未来への風は吹いていることを示そうとした「見切りの速さ」を提示したことが一つにありますが、本の読まれ方としてはその「予言」の正否がどうだったかに尽きてしまうのはある意味では不幸だったと思います。それこそイデオロギー的な「反省」ではないところで、ジャーナリスティックにイデオロギー的に読まれてしまう本の性格・立ち位置としては皮肉ともいえるでしょうか。\nしかしながら、そのようにイデオロギー的に「予言」を楽しむように読めてしまいますし、さやわかによって一面的には誘導されるのも仕方ないとしても、『一〇年代文化論』の意味としては、宇野常寛の『ゼロ年代の想像力』（「決断主義」など）をはじめとするゼロ年代批評の「鍵用語」がジャーナリスティックに、イデオロギー的に消費されたことに対する「反省」としての応答といった位置づけがあるでしょう。\nなぜなら、さやわかという書き手が出発した2010年代の批評（言葉と運動）の可能性の応答としては、ゼロ年代の「反省」からしか始…",
          "link": "https://futbolman.hatenablog.com/entry/2022/01/17/121009",
          "publishedOn": "2022-01-17T03:10:09.000Z",
          "wordCount": 288,
          "title": "サブカルチャー化した文学から呼びかけられている――『やはり俺の青春ラブコメはまちがっている。』（１７）",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/f/futbolman/20220113/20220113211741.jpg",
            "type": "image/jpeg",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/f/futbolman/20220113/20220113211741.jpg"
        },
        {
          "id": "hatenablog://entry/13574176438051246066",
          "author": null,
          "description": "14巻の冒頭では「たった一言。たった、一言伝えるだけなのに、随分と長い時間を掛けてしまった」と雪ノ下雪乃の独白があるように、個々人がもどかしく「たった一言」で言い表せない言葉のアポリアに終始執着してきたのが後期『俺ガイル』といえるでしょうか。『俺ガイル』を端的に表しているように思えます。「言えなさ」、もどかしさによる「言葉の貧しさ」をくぐり抜けてなお言葉を用いるほかない倒錯性を含めた言葉と他者との向き合い方。\n \n\nその引き手から指を離した瞬間。\nひやりとした感触にはっとした。\n指先には、まるで抜けない棘のように、冷たさがずっと残っている。\n（…）\nなのに、指先は。\nあの扉に、最後に触れた指先だけは、今もまだ冷たいままだ。（P40）\n \n指先の冷たさは「違和感」の暗喩となっています。\n関係性の終わりとして、雪ノ下雪乃の「願い」は由比ヶ浜結衣の「願い」を聞くことでした。\n言語化しているようでしていないような曖昧さがあり、「願い」をなんでも叶えるという非対称性ありきものですから、比企谷八幡の主体性はここでは特別に語られていません。潔癖的に欺瞞を許容することはできませんから、他者との関係性において「勝負」の件から「願い」を聞き入れる受動的な態度はみえるものの、比企谷八幡の意思はみえないようになっています。そのような歪さがあります。非対称性の固定化といえるでしょうか。それを遠ざけていたにもかかわらず、他者に委ねざるを得ないねじれは「勝負」や「願い」をエクスキューズにしている主体性の欠落といえるでしょう。\n前述した9巻のボーイ・ミーツ・ガールの非対称性、その保守性とも重なっているようにも思えます。もちろん、これはラストにも関わってくるので後述することになるでしょうが。\n雪ノ下雪乃による「願い」は歪な関係性の清算となります。潔癖的ともいえるでしょう。\n「願い」を素直に引き受けることで、…",
          "link": "https://futbolman.hatenablog.com/entry/2022/01/10/120854",
          "publishedOn": "2022-01-10T03:08:54.000Z",
          "wordCount": 314,
          "title": "サブカルチャー化した文学から呼びかけられている――『やはり俺の青春ラブコメはまちがっている。』（１６）",
          "enclosure": {
            "url": "https://m.media-amazon.com/images/I/51Ifl5aJKaL._SL500_.jpg",
            "type": "image/jpeg",
            "length": "0"
          },
          "imageUrl": "https://m.media-amazon.com/images/I/51Ifl5aJKaL._SL500_.jpg"
        },
        {
          "id": "hatenablog://entry/13574176438048915183",
          "author": null,
          "description": "13巻の冒頭、プロム企画に問題が発生します。プロム自体が問題視されているように、「大人」の意見として「正しさ」が横行しています。あるいは多数派によって決定される同調性、「空気」の可視化とでもいうべきでしょう。「空気を読む」ことの裏返しには集団の閉鎖性と排他性をみることができます。そこから自己疎外している比企谷八幡の存在感・語り手の位置は、特権的な意味でオルタナティブとして機能しているといえるでしょうか。\n比企谷八幡は自身の「悪癖」を自覚しながらも、「約束」のために雪ノ下雪乃を手伝うといいます。\nしかし、その行為は雪ノ下雪乃の主体性の問題に深く絡みつき、彼女が「自立」しようとしている行動や選択を妨げる可能性を意味している。「依存」という関係性に「正しく」回収されてしまうのではないか、という不安が窺えます。\n \n\n「うん……。まぁ、私としても依存という表現が正しいとは思わないが、こういうのは本人の捉え方だからな。バイアスに偏りがあると、いくら言葉を尽くしても届かないことは多い」\n（…）\nどれだけ自分を宥めすかして、曖昧模糊とした綿飴みたいな日々を送っても、どこかで見過ごせず、千言万遍費やしても誤魔化しきれずに突き詰めてしまう化け物じみた自意識過剰なまでの潔癖さ。結局今に至っても、その自意識の化け物は心に棲み続けて、いつも一歩後ろの暗がりからじっと自分を俯瞰しているような気がする。\nだからこそ、わかるのだ。自分が抱いた自身への認識は簡単には払拭できない。それは雪ノ下も同様なのだろう。依存している、という言葉が真実であるか否かはさておき、少なくとも雪ノ下の中での認識はそうなっている。それをどんなに否定しても、納得することはおそらくない。（P33）\n \n「共依存」という言語化、ラベリングへの認識について平塚静が意見を述べるシーンとなります。\n平塚静は一貫して「共依存」に疑問符をつけて…",
          "link": "https://futbolman.hatenablog.com/entry/2022/01/03/120612",
          "publishedOn": "2022-01-03T03:06:12.000Z",
          "wordCount": 256,
          "title": "サブカルチャー化した文学から呼びかけられている――『やはり俺の青春ラブコメはまちがっている。』（１５）",
          "enclosure": {
            "url": "https://m.media-amazon.com/images/I/51bSrGRLkCL._SL500_.jpg",
            "type": "image/jpeg",
            "length": "0"
          },
          "imageUrl": "https://m.media-amazon.com/images/I/51bSrGRLkCL._SL500_.jpg"
        },
        {
          "id": "hatenablog://entry/13574176438044773298",
          "author": null,
          "description": "「本物」を選ぶことで生じる純粋な想いに相反するかのように、潜む欺瞞的な歪みや非対称的な暴力性に目を瞑ることは、「先送りの病」＝モラトリアムに回収されてしまう恐れがあります。「モラトリアム」とロマン主義的な心性は、対置的な意味での後期が抱える「本物」を巡る自意識の表れであるとするならば、歪みをそのままにすることができない「潔癖」であるからこそ、冷たくて残酷な現実の痛みと向き合い続けなければなりません。\n9巻から生じた「本物」という「対称的」な目的を一致させながらも獲得した共同性の違和感＝欺瞞を告発したのが11巻でありましたが、その壮大な願いは同時に呪いにもなり、潔癖的に許容できないがゆえに「私と他者」を傷つける「言葉と現実」のズレが剥き出しになります。\n12巻の冒頭、積み重なってきた月日を思わせる他者の温度と距離感が描かれています。「変化」の前兆であり、もう戻れない関係性。欺瞞的な反復的構造から脱け出すために、主体的に「先送り」しないことを意識づけるように。これまでの一年間の歩みを振り返りながら語り直すことで、共有した過去を「思い出」にしては相対化していきます。共有している事実でも、それぞれの感情の差異はあるでしょう。他者であるから。\nしかし、ここではさほど「言葉と現実」が乖離していないような微温的なコミュニケーションが繰り広げられます。記憶の語り直しのなかでも、あえて言わない「沈黙」も含めた語りといったハイコンテクストな共有性が見て取れるでしょうか。意味が過剰に発生する「場」となっている。\n「相対化」して「先送り」にしてきた比企谷八幡の内面の吐露となります。\n \n \n結局のところ、俺はありとあらゆる解答も解決も結論も求めてはいない。きっと解消されることを望んでいた。目の前の課題問題難題が有耶無耶のうちに雲散霧消する曖昧模糊とした終わりを待っていた。\nおそらく俺たち全員がこの…",
          "link": "https://futbolman.hatenablog.com/entry/2021/12/21/123815",
          "publishedOn": "2021-12-21T03:38:15.000Z",
          "wordCount": 208,
          "title": "サブカルチャー化した文学から呼びかけられている――『やはり俺の青春ラブコメはまちがっている。』（１４）",
          "enclosure": {
            "url": "https://m.media-amazon.com/images/I/514om1ErGAL._SL500_.jpg",
            "type": "image/jpeg",
            "length": "0"
          },
          "imageUrl": "https://m.media-amazon.com/images/I/514om1ErGAL._SL500_.jpg"
        }
      ]
    },
    {
      "title": "愛のらくがき帳",
      "feedUrl": "https://blog.ishotihadus.com/feed",
      "siteUrl": "https://blog.ishotihadus.com",
      "articles": []
    },
    {
      "title": "maspyのHP",
      "feedUrl": "https://maspypy.com/feed",
      "siteUrl": "https://maspypy.com",
      "articles": []
    },
    {
      "title": "あなたは嘘つきですかと聞かれたら「YES」と答えるブログ",
      "feedUrl": "https://snuke.hatenablog.com/rss",
      "siteUrl": "https://snuke.hatenablog.com/",
      "articles": []
    },
    {
      "title": "e869120の記事 - Qiita",
      "feedUrl": "https://qiita.com/e869120/feed",
      "siteUrl": "https://qiita.com",
      "articles": []
    },
    {
      "title": "square1001の記事 - Qiita",
      "feedUrl": "https://qiita.com/square1001/feed",
      "siteUrl": "https://qiita.com",
      "articles": [
        {
          "id": "https://qiita.com/square1001/items/6d414167ca95c97bd8b2",
          "author": null,
          "description": "こんにちは、square1001 です。\n\n現在は東京大学の学部 1 年生をしています。私は中学 1 年の頃からプログラミングをやっていて、特にアルゴリズムが大好きです。AtCoder をはじめとする 競技プログラミング にも取り組んでいて、中高生のときは 情報オリンピック にも参加していました。\n\n本記事では、アルゴリズムや競技プログラミングに興味がある方、あるいはプログラミングをやっているけどアルゴリズムをよく知らない方に\n\n\nアルゴリズムはどんなもので\nアルゴリズムを使うとどんな問題が解けて\nアルゴリズムが地球のように広く、多様で、奥深く、そして楽しいこと\n\n\nを知ってもらおうと思っています。\n\n\nアルゴリズムの世界へようこそ\n\n時代は 2020 年代に突入し、急速に IT 化 や DX が進んでいく中で、問題を効率的に解くアルゴリズム技術の重要性が、ますます高まっています。そして、アルゴリズムは、世の中の色々な場面で使われるようになっています。まずは例を 3 つ挙げてみます。\n\n\n例 1：電車の乗換案内。どのように電車を乗り継げば最も速く目的地に着けるかは、どのようにして求めているのだろうか？\n例 2：検索エンジン。検索する文字列を入力したとき、どのように一番上に表示するウェブページを探索しているのか？\n例 3：オセロや将棋などの AI1。コンピューターはどのような計算をして、最善手を考えているのだろうか？\n\n\nここで本記事では、プログラミングをやったことがあるけどアルゴリズムをまだ知らない人や初心者に向けて、アルゴリズムがどんな世界なのかを体感させたいと思っています。その中で、多様なアルゴリズムの世界を感じてもらうため、アルゴリズムの世界を 7 つのカテゴリーに分け2、全部で 25 個の問題を紹介します。一方で、本記事はアルゴリズムの世界を感じてもらうことを最大の…",
          "link": "https://qiita.com/square1001/items/6d414167ca95c97bd8b2",
          "publishedOn": "2021-12-23T10:37:41.000Z",
          "wordCount": 2846,
          "title": "アルゴリズムの世界地図",
          "imageUrl": "https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fcdn.qiita.com%252Fassets%252Fpublic%252Farticle-ogp-background-9f5428127621718a910c8b63951390ad.png%3Fixlib%3Drb-4.0.0%26w%3D1200%26blend64%3DaHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTkxNiZ0eHQ9JUUzJTgyJUEyJUUzJTgzJUFCJUUzJTgyJUI0JUUzJTgzJUFBJUUzJTgyJUJBJUUzJTgzJUEwJUUzJTgxJUFFJUU0JUI4JTk2JUU3JTk1JThDJUU1JTlDJUIwJUU1JTlCJUIzJnR4dC1jb2xvcj0lMjMyMTIxMjEmdHh0LWZvbnQ9SGlyYWdpbm8lMjBTYW5zJTIwVzYmdHh0LXNpemU9NTYmdHh0LWNsaXA9ZWxsaXBzaXMmdHh0LWFsaWduPWxlZnQlMkN0b3Amcz0wYmVkMzM3MmNmNmQ2YWRiYzMxOTBiNDUwZDA1NGUwMQ%26blend-x%3D142%26blend-y%3D112%26blend-mode%3Dnormal%26s%3Dbf1d325e10980a0c052b73a78657d2bc?ixlib=rb-4.0.0&w=1200&blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTYxNiZ0eHQ9JTQwc3F1YXJlMTAwMSZ0eHQtY29sb3I9JTIzMjEyMTIxJnR4dC1mb250PUhpcmFnaW5vJTIwU2FucyUyMFc2JnR4dC1zaXplPTM2JnR4dC1hbGlnbj1sZWZ0JTJDdG9wJnM9Zjc0MjhlYjkwODIxNDU0NWJhMzhlMDY5ODQzNDY0MTI&blend-x=142&blend-y=491&blend-mode=normal&s=527d9378d741e84f9bf25d3a96df19e9"
        }
      ]
    },
    {
      "title": "うさぎ小屋",
      "feedUrl": "https://kmyk.github.io/blog/feed",
      "siteUrl": "https://kmyk.github.io/blog/",
      "articles": []
    },
    {
      "title": "kyopro_friends’ diary",
      "feedUrl": "https://kyopro-friends.hatenablog.com/rss",
      "siteUrl": "https://kyopro-friends.hatenablog.com/",
      "articles": []
    },
    {
      "title": "えびちゃんの日記",
      "feedUrl": "https://rsk0315.hatenablog.com/rss",
      "siteUrl": "https://rsk0315.hatenablog.com/",
      "articles": [
        {
          "id": "hatenablog://entry/13574176438060126783",
          "author": null,
          "description": "rsk0315.hatenablog.com\nエゴサしたらこの記事がわりと読まれているっぽかったものの、やや実装が重い気がしたので*1別の解法を書きます。\ntl; dr\nセグ木。\n定義\n有限集合 \\(S\\subseteq \\N\\) における mex というのは、\\(S\\) に含まれない最小の自然数 \\(\\min_{i\\in \\N\\setminus S} i \\) です。\nやりたいこと\n追加：\\(S\\gets S\\cup\\{i\\}\\) で更新\n削除：\\(S\\gets S\\setminus\\{i\\}\\) で更新\nmex：\\(\\min_{i\\in \\N\\setminus S} i\\) を出力\nこれを (amortized) \\(O(\\log(|S|))\\) 時間とかで。\nアイディア\nクエリ数が \\(n\\) のときのことを考えます。このとき、mex が \\(n\\) を超えることはないことに注意します。\n\\(S = \\{0, 1, \\dots, n-1\\}\\) のとき最大値 \\(n\\) になります。\nそこで、bool の配列 \\(a = (a_0, a_1, \\dots, a_{n-1})\\) を \\(a_i = (i\\in S)\\) が保たれるように管理します。\n求めたい mex は、\\(\\wedge_{i\\in[0, x)} a_i\\) が true になる最大の \\(x\\) です（このとき \\(a_x\\) が false となり、定義から \\(x\\notin S\\) となるので）。\nよって、\\(a\\) をセグ木で管理し、この \\(x\\) を二分探索（ACL で言うところの max_right）で求めればよいです。\n\\(n\\) 以上の値を \\(S\\) に入れると（クエリ数 \\(n\\) の下で）mex は \\(n\\) 未満になることに注意すると、\\(n\\) 以上の値の更新クエリは無…",
          "link": "https://rsk0315.hatenablog.com/entry/2022/02/05/043902",
          "publishedOn": "2022-02-04T19:39:02.000Z",
          "wordCount": 496,
          "title": "要素の追加・削除と mex を対数時間で処理するよ (2) + 区間 mex クエリ",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438055890378",
          "author": null,
          "description": "去年末にやると言っていたんですが、やっと終わりました。\nクエリで与えられた区間の最長増加部分列の長さを答えるやつで、計算量は \\(\\langle O(n\\log(n)^2), O(\\log(n))\\rangle\\) です。\n実装前にイメージがつきにくかったのと、あったら楽しいかなと思ったので、ブラウザ上で可視化するおもちゃを作りました。\n\nRange LIS Query を触って遊べるやつを公開しましたhttps://t.co/q4X7Oecddn pic.twitter.com/Hrw8Eq1wN5\n— えびちゃん (@rsk0315_h4x) 2022年1月23日\n  \nrsk0315.github.io\nざっくりとした概要の解説も書きました。\n実装の詳細などは書いていませんが、実装するために必要となるものの大まかな道筋を書きました。\nrsk0315.github.io\nブラウザ上のおもちゃについては、どうせ描画パートが律速になるだろうと思ったので、計算量は \\(\\langle \\Omega(n^2 \\log(n)), \\Omega(n^2)\\rangle\\) とかで動いていると思います。",
          "link": "https://rsk0315.hatenablog.com/entry/2022/01/23/235513",
          "publishedOn": "2022-01-23T14:55:13.000Z",
          "wordCount": 137,
          "title": "区間 LIS クエリを書きました",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438052433991",
          "author": null,
          "description": "次の操作ができる優先度つきキューのおはなしです。\npush(x)：x を挿入する\npop_newest(k)：挿入順が新しい方から k 以内の要素の最大値を取得・削除\npop_oldest(k)：挿入順が古い方から k 以内の要素の最大値を取得・削除\n\n\n取得だけする peek_newest(k), peek_oldest(k) もできる\npop()：最大値を取得・削除\n\n\nこれは pop_newest(oo) でできる\noo は \\(\\infty\\) のこと\n計算量は amortized \\(O(\\log(n))\\) time です。\\(n\\) はその時点での要素数です。\n記事の構成は以下の流れになります。\n優先度つきキューを実装してみる\n\n\nよくある二分ヒープとは異なるアプローチ\n\nの実装から自然に pop_newest(k) などを捌けるので、その説明をする\n同じアイディアで他のデータ構造も作れるので、その紹介をする\n優先度つきキューの実装\n区間最大値を取得できるデータ構造としてセグ木がありますね。セグ木を使って優先度つきキューを作ります。\n大まかなアイディアとしては次の通りです。\n長さ \\(m\\) のセグ木 \\(a\\) を用意し、添字 \\(i \\gets 0\\) で初期化する。\npush(x) の際は、\\(a_i \\gets x\\), \\(i\\gets i+1\\) で更新する。\npop() の際は、全体の最大値 \\(a_j\\) を取得し、\\(a_j\\gets-\\infty\\) で更新する。\n\\(a_j\\) を更新するために \\(j\\) が必要になりますが、以下のふたつの方法があります。\nまず最大値 \\(x\\) を求めて、\\([0, j+1)\\) の最大値が \\(x\\) になるような \\(j\\) の最小値を二分探索で求める\n\\( (a_i, i)\\) のペアの辞書順 max を返す演算をセグ木に乗せる\nほぼできていますが、次の問題点があります*1。\n\\(m+1\\) 回の挿入をしようとするとこわれる\n要素数 \\(n\\) に対する log ではなく、決め打ちしたサイズ \\(m\\) に対する log の時間になる\nこれは適当に解決できます。\n\\(i=m\\) で挿入しようとした場合と、\\(n\\le m/4\\) で削除しようとした場合*2に、再構築します。\nセグ木のサイズを \\(m\\gets 2n\\) で更新し、元々の \\(-\\infty\\) 以外の要素を前半に詰め直します。残りは \\(-\\infty\\) でうめます*3。\nならし計算量解析のよくある議論（vector を適切なタイミングで伸縮させるやつ）と同じような議論で、再構築のコストが \\(O(1)\\) 時間であることが言えるはずです。再構築のおかげで \\(m=O(n)\\) になるので、amortized \\(O(\\log(n))\\) time となります。\n古い方から \\(k\\) 個以内のやつの処理\n区間和のセグ木を用意します。これを \\(b\\) とします。\n各 \\(i\\) に対して、\\(a_i \\gt -\\infty\\) のとき \\(b_i = 1\\)、そうでないとき \\(b_i = 0\\) とします。\nセグ木 \\(b\\) 上の二分探索で「\\([0, i)\\) が区間和が \\(k\\) となる最小の \\(i\\)」を求め、その \\(i\\) に対して \\(a\\) で \\([0, i)\\) の区間 max を求めます。\n新しい方から \\(k\\) 個以内についても似た感じです。\n\\(b\\) 上の二分探索を 2 回やれば、挿入順が \\([k_L, k_R)\\) の max とかもできます。\n他のデータ構造\n上記と同様のアイディアで、次の操作が amortized \\(O(\\log(n))\\) time でできます。\npush(x)：末尾に x を追加\nremove(i)：i 番目の要素を削除\nfold(l..r)：区間 l..r のモノイド積を求める\n\n\nあるいは [i]：添字 i の要素の取得\n上記で \\(-\\infty\\) を詰めていた箇所の代わりには、単位元 \\(e\\) を使えばよいです。\nこっちの方がむしろよく見るかもしれませんね。\nあとがき\nなんか疲れていて、直近 \\(k\\) 個以内の最大値を取得できるヒープがあれば面白そうでは？と思った日があったので書きました。\n応用例があるのかはわかりません。\n区間モノイド積を求められる平衡木でも当然できます。\nおわり\nお粗末さまでした。\n*1:ないと思う人もいます。\n*2:\\(n\\le m/2\\) を条件にすると、連続で削除するときにたくさん再構築されてこわれますね。\n*3:\\(n=0\\) で挿入しようとした場合などはよしなに処理します。",
          "link": "https://rsk0315.hatenablog.com/entry/2022/01/13/233015",
          "publishedOn": "2022-01-13T14:30:15.000Z",
          "wordCount": 315,
          "title": "直近 k 回以内に挿入された要素の最大値を出せる優先度つきキュー他いろいろ",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438050886999",
          "author": null,
          "description": "ここで区間 \\(k\\)-最小値と呼んでいるのは以下のような問題です。\n最初に配列 \\(a = (a_0, a_1, \\dots, a_{n-1})\\) が与えられるよ。\n次にクエリ処理を \\(q\\) 回してね。\nクエリは \\( ([l, r), k)\\) の形式で与えられるので、\\(a_l, a_{l+1}, \\dots, a_{r-1}\\) を昇順ソートしたときに 0-indexed で先頭から \\(k\\) 番目に来る値を答えてね。\nただし \\(0\\le k \\lt r-l\\) が保証されるので、答えがなくなることはないから安心してね。\n\n\n昨日の ABC-D は、これに \\(l = 0\\) の追加制約が与えられたものと見ることができます。\n座標圧縮などをすれば帰着できるので、以下では \\(0\\le a_i \\lt n\\) とします。値の重複も \\( (a_i, i)\\) などで tie-break することにすればよいので、distinct であるとします（つまり、\\(0, 1, \\dots, n-1\\) の順列が与えられるものとします*1）。\nこの記事では次のことを紹介します。\nwavelet matrix での解法（の概要）\n\n\n前処理 \\(O(n\\log(n))\\) time、クエリ \\(O(\\log(n))\\) time\nクエリ先読みがいらない\n\n\n\\(i\\) 個目のクエリに答えたら \\(i+1\\) 個目のクエリが与えられる、などの状況でもいける\n並列二分探索での解法\n\n\nバッチ処理 \\(O( (n+q)\\log(n)^2)\\) time\nクエリ先読み\n並列二分探索の方が計算量では劣っているのですが、並列二分探索の導入や実装の練習（あるいはライブラリの verify）として使えそうだな〜と思ったので、書こうと思い至った次第です。\n自分の中ではこのアプローチにさっ…",
          "link": "https://rsk0315.hatenablog.com/entry/2022/01/09/152028",
          "publishedOn": "2022-01-09T06:20:28.000Z",
          "wordCount": 648,
          "title": "区間 k-最小値いろいろ",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        },
        {
          "id": "hatenablog://entry/13574176438046328905",
          "author": null,
          "description": "自分語り記事です。\n\nえびちゃんの一年を振り返る記事をうっかり書きそうになったけど、冷静になったので却下した\n— えびちゃん (@rsk0315_h4x) 2021年12月16日\n  \nうっかりし直しました。\n今年お勉強したもの\n数学関連のものをいくつか学んだり、昔わかった気になったものを学び直したりしました。\nACL math\n\n\nfloor sum は去年だけど\n\n\nACL にマージされたのは今年\nmod tetration\n\n\n\\( (a\\uparrow\\uparrow b) \\bmod n = \\underbrace{a^{(a^{(\\cdots ^a)})}}_{b\\text{ many}} \\bmod n\\)\n実装が悪いと \\( (2\\uparrow\\uparrow 3)\\bmod 32 = 16\\) を \\(0\\) としてしまう\nmod Ackermann\n\n\n\\(A(a, b) \\bmod n\\)\n離散対数\n\n\n \\(a^x = b\\pmod{n}\\) なる最小の \\(x\\ge 0\\)。なければないと言う\n特に、法が合成数の場合\n素数の数え上げ\n\n\n\\(\\pi(n)\\)\n\\(n\\) 以下の素数の個数を \\(O(n^{3/4}/\\log(n))\\) 時間で数える\n\\(n^2+1\\) 型素数篩\n\n\n特定の状況で必要になるやつ\n\\(n^2+1\\) 型の整数の素数判定をできる\n\\(n^2+2n+1\\) 型素数列挙というギャグもありました\nBoyer–Moore majority algorithm\n\n\n過半数を占める要素を deterministic \\(O(n)\\) 時間で探す\n\n\n「過半数を占めているとすればこれ！」というのを探す\n実際に占めているかの判定は、再度走査してそれの個数を数えれば可能\nSA-IS\n\n\n接尾辞配列を \\(O(n)\\) 時間で構築する\n\n…",
          "link": "https://rsk0315.hatenablog.com/entry/2021/12/26/164331",
          "publishedOn": "2021-12-26T07:43:31.000Z",
          "wordCount": 379,
          "title": "今年のえびちゃん 2021",
          "enclosure": {
            "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/r/rsk0315/20211226/20211226165033.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn-ak.f.st-hatena.com/images/fotolife/r/rsk0315/20211226/20211226165033.png"
        },
        {
          "id": "hatenablog://entry/13574176438044139389",
          "author": null,
          "description": "競プロ er の間では、（主に実生活で）最適値を探そうと二分探索をして、上限を大きく取りすぎたために破滅するという定番ネタがあります*1。\nあるいは、実際のコンテストでも「上限が小さすぎた」「上限を大きくしすぎたため判定関数内でオーバーフローした」などの失敗をする人はそれなりにいる印象です。\n後者は特に、上限を思考停止で 1e9 あるいは 1e18 にしている人にありがちです。\nここでは、「より成功率の高い思考停止の方法」として、指数探索 (exponential search) というのを紹介します。\n指数時間かけて全探索するというタイプのギャグではないです。\n本題\n以下のようなコードを考えます。\nlet mut ok = 0;\nlet mut bad = todo!();\nwhile bad - ok > 1 {\n    let mid = ok + (bad - ok) / 2;\n    *(if pred(mid) { &mut ok } else { &mut bad }) = mid;\n}\n\n\n\nC++ なら以下のような感じです。\nll ok = 0;\nll bad = TODO();\nwhile (bad - ok > 1) {\n    auto mid = ok + (bad - ok) / 2;\n    (pred(mid)? ok: bad) = mid;\n}\n\n\n\nmid = (ok + bad) / 2; でもいいですが、以下の理由からmid = ok + (bad - ok) / 2; を使っています：\nbad がオーバーフローしなければ計算過程でオーバーフローしないこと\nループ条件で bad - ok を使っているので、それを使う方が直感的な（or 頭にやさしい）気がすること\nまた、その程度の最適化は人間ではなくコンパイラの役割だろうと考え、>>…",
          "link": "https://rsk0315.hatenablog.com/entry/2021/12/19/124017",
          "publishedOn": "2021-12-19T03:40:17.000Z",
          "wordCount": 363,
          "title": "二分探索の上限を適切に決められずに失敗する人かわいそう",
          "enclosure": {
            "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
            "type": "image/png",
            "length": "0"
          },
          "imageUrl": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"
        }
      ]
    }
  ],
  "cliVersion": "1.14.4"
}